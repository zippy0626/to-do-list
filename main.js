(()=>{"use strict";var __webpack_modules__={208:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(417);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);\n// Imports\n\n\n\nvar ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(369), __webpack_require__.b);\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n@font-face {\n  font-family: Lato;\n  src: url(${___CSS_LOADER_URL_REPLACEMENT_0___});\n}\n\n:root {\n  --borderRadiusPrimary: 5px;\n  --borderPrimary: 1px rgb(215, 215, 215) solid;\n\n  --whiteSmokeHoverColor: rgb(235, 235, 235);\n  --whiteSmokeActiveColor: rgb(228, 228, 228);\n}\n\nhtml,\nbody {\n  width: 100%;\n  height: 100%;\n}\nbody {\n  display: grid;\n  grid-template-columns: 290px 1fr 300px;\n  grid-template-rows: 1fr;\n  grid-template-areas: "menu main-display editor";\n  gap: 5px;\n\n  font-family: Lato;\n  position: relative;\n}\n\n.icon {\n  width: 18px;\n  margin: 0;\n  padding: 0;\n}\n\ninput {\n  all: unset;\n}\n\n/* menu section */\n#menu {\n  --innerMenuLeftBoxPadding: 2px;\n\n  display: flex;\n  flex-direction: column;\n\n  padding: 5px;\n\n  border: var(--borderPrimary);\n  border-radius: var(--borderRadiusPrimary);\n}\n#menu section {\n  margin: 8px 0 4px 0;\n}\nh1 {\n  display: flex;\n  align-items: center;\n\n  height: 35px;\n  margin: 5px 0 5px 0;\n  font-size: 30px;\n}\nh3 {\n  display: flex;\n  align-items: center;\n\n  height: 30px;\n}\n\n/* search bar section */\n.search-bar {\n  --pixels: 25px;\n  --searchIconHeight: var(--pixels);\n  --searchIconWidth: var(--pixels);\n\n  display: flex;\n  align-items: center;\n\n  margin: 0!important;\n  padding-left: 8px;\n\n  width: 100%;\n  height: 50px;\n\n  background-color: rgba(16, 249, 16, 0.2);\n  border-radius: var(--borderRadiusPrimary);\n}\n.search-bar label {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.search-icon {\n  width: var(--searchIconWidth);\n  height: var(--searchIconHeight);\n  margin-right: 5px;\n\n  filter: opacity(.7);\n}\n/* actual bar */\n#search-bar {\n  height: 25px;\n  font-family: inherit;\n\n  padding-left: 8px;\n\n  border: 1px solid grey;\n  border-radius: var(--borderRadiusPrimary);\n\n  background-color: white;\n}\n\n/* tasks section */\n#tasks {\n  flex: 0 0 150px;\n}\n.task-btn-container {\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n\n  padding-left: var(--innerMenuLeftBoxPadding);\n\n  position: relative;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n.task-btn-container button {\n  width: 98%;\n  height: 28px;\n\n  display: flex;\n  align-items: center;\n  \n  text-align: left;\n  font-size: 16px;\n  font-family: inherit;\n\n  border: none;\n  border-radius: var(--borderRadiusPrimary);\n\n  background-color: hsl(210, 100%, 90%);\n  \n  cursor: pointer;\n}\n.task-btn-container .icon {\n  margin: 0 6px 0 3px;\n}\n.task-btn-container button:hover {\n  background-color: hsl(210, 100%, 87%);\n}\n.task-btn-container button:active {\n  background-color: hsl(210, 100%, 85%);\n}\n/* add new task/project dropdown */\n.task-btn-container button:first-of-type {\n  z-index: 3;\n}\n.task-create-new-options {\n  z-index: 2;\n  position: absolute;\n  top: 28px;\n  left: 8px;\n\n  font-size: 15px;\n  background-color: hsl(210, 100%, 95%);\n  /* box-shadow: 0 4px 6px -2px rgba(0, 0, 0, 0.3); */\n  border: .5px hsl(210, 100%, 80%) solid;\n  border-top: none;\n}\n.task-create-new-options li {\n  list-style: none;\n\n  display: flex;\n  align-items: center;\n  text-align: left;\n\n  height: 28px;\n  padding: 5px;\n\n  cursor: pointer;\n  user-select: none;\n}\n.task-create-new-options li:hover {\n  background-color: hsl(210, 100%, 92%);\n}\n.task-create-new-options li:active {\n  background-color: hsl(210, 100%, 90%);\n}\n\n\n/* projects section */\n#projects {\n  flex: 1 0 auto;\n}\n\n/* drop down */\nbutton {\n  all: unset;\n}\n.sort-by-button {\n  font-size: 14px;\n  width: fit-content;\n\n  border: var(--borderPrimary);\n  border-radius: var(--borderRadiusPrimary);\n\n  padding: 2px 4px 2px 4px;\n  margin-bottom: 3px;\n\n  background-color: rgb(250, 250, 250);\n\n  cursor: pointer;\n}\n.sort-by-button:hover {\n  background-color: var(--whiteSmokeHoverColor);\n}\n.sort-by-button:active {\n  background-color: var(--whiteSmokeActiveColor);\n}\n\n.hidden {\n  display: none !important;\n}\n\n.sort-options {\n  list-style: none;\n  font-size: 12px;\n\n  width: fit-content;\n  z-index: 2;\n  position: absolute;\n\n  padding: 3px;\n  background-color: rgb(250, 250, 250);\n\n  -webkit-box-shadow: 0px 0px 8px 1px rgba(196,196,196,1);\n  -moz-box-shadow: 0px 0px 8px 1px rgba(196,196,196,1);\n  box-shadow: 0px 0px 8px 1px rgba(196,196,196,1);\n}\n.sort-options li {\n  cursor: pointer;\n  user-select: none;\n  margin-bottom: 2px;\n}\n.sort-options li:hover {\n  background-color: var(--whiteSmokeHoverColor);\n}\n.sort-options li:active {\n  background-color: var(--whiteSmokeActiveColor);\n}\n/*  */\n\n\n.projects-wrapper {\n  overflow: hidden;\n  border: 1px solid whitesmoke;\n  border-radius: var(--borderRadiusPrimary);\n}\n.project-container {\n  overflow: auto;\n\n  display: flex;\n  flex-direction: column;\n  flex-shrink: 0;\n  gap: 5px;\n\n  height: 280px;\n}\n/* project item styling */\n.project-item {\n  height: 50px;\n  padding: 5px;\n  font-size: 15px;\n\n  display: flex;\n  align-items: center;\n\n  border-radius: var(--borderRadiusPrimary);\n  background-color: rgb(250, 250, 250);\n\n  cursor: pointer;\n}\n.project-item:hover {\n  background-color: rgb(242, 242, 242);\n}\n.project-item:active {\n  background-color: rgb(232, 232, 232);\n}\n.project-item div:first-of-type {/*no class div*/\n  display: flex;\n  flex-direction: column;\n  gap: 3px;\n}\n.project-info-wrapper {\n  display: flex;\n}\n.project-title {\n  user-select: none;\n  font-size: 15px;\n}\n.project-due-date {\n  font-size: 13px;\n}\n.project-priority, .card-priority {\n  margin-left: auto;\n  padding: 5px 8px 5px 8px;\n\n  font-size: 12px;\n  font-weight: bold;\n\n  border-radius: var(--borderRadiusPrimary);\n}\n.project-is-complete {\n  font-size: 11px;\n  padding: 1px 2px 1px 2px;\n  background-color: #DDDDDD;\n\n  margin: 0px 0px 4px 20px;\n  align-self: center;\n}\n\n/* prio tags */\n.low {\n  background-color: rgb(0, 190, 0, .4);\n  color: rgb(0, 128, 0);\n  border-radius: var(--borderRadiusPrimary);\n  border: 1px solid rgb(0, 128, 0); /*70% of bgcol*/\n  user-select: none;\n}\n.medium {\n  background-color: rgba(255, 255, 0, .4);\n  color: rgb(100, 100, 0);\n  border-radius: var(--borderRadiusPrimary);\n  border: 1px solid rgb(170, 170, 0);\n  user-select: none;\n}\n.high {\n  background-color: rgba(255, 0, 0, .4);\n  color: rgb(120, 0, 0);\n  border-radius: var(--borderRadiusPrimary);\n  border: 1px solid rgb(190, 0, 0);\n  user-select: none;\n}\n.critical {\n  background-color: rgba(156, 56, 255, 0.9);\n  color: white;\n  border-radius: var(--borderRadiusPrimary);\n  border: 1px solid rgba(100, 56, 205, 0.9);\n  user-select: none;\n}\n\n/* main display section */\n#main-display {\n  border: var(--borderPrimary);\n  border-radius: var(--borderRadiusPrimary);\n\n  padding: 5px;\n\n  display: flex;\n  flex-direction: column;\n}\n.main-title-date-wrapper {\n  display: flex;\n  align-items: center;\n}\n.main-title {\n  margin-left: 3px;\n}\n.main-date {\n  margin: 5px 0 0 20px;\n  color: grey;\n  font-size: 22px;\n  font-weight: 100;\n}\n\n.card-container-wrapper {\n  border-radius: var(--borderRadiusPrimary);\n  overflow: hidden;\n}\n.card-container {\n  overflow: auto;\n  height: 576px;\n  \n  display: flex;\n  flex-direction: column;\n  gap: 13px;\n}\n/* card styling */\n.card {\n  width: 580px;\n  height: 55px;\n\n  display: flex;\n  align-items: center;\n  flex-shrink: 0;\n\n  padding: 0 8px 0 8px;\n  margin-left: 3px;\n\n  border-radius: var(--borderRadiusPrimary);\n  background-color: whitesmoke;\n\n  cursor: pointer;\n}\n.card:hover {\n  background-color: rgb(240, 240, 240);\n}\n.card:active {\n  background-color: rgb(235, 235, 235);\n}\n\n.card-title {\n  font-size: 20px;\n}\n.card-info-wrapper {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n\n  margin-top: 2px;\n\n  font-size: 13px;\n  user-select: none;\n}\n.card-complete-status {\n  background-color: rgb(221, 221, 221);\n  padding: 1px 2px 1px 2px;\n}\n.card-project-link {\n  background-color: rgb(221, 133, 0, .3);\n  padding: 1px 3px 1px 3px;\n}\n.card-is-project {\n  background-color: rgba(255, 106, 0, 0.25);\n  padding: 1px 3px 1px 3px;\n}\n\n/* editor section */\n#editor {\n  border: var(--borderPrimary);\n  border-radius: var(--borderRadiusPrimary);\n\n  padding: 5px;\n}\n.editor-title {\n  margin-left: 3px;\n}\n#editor form {\n  width: 100%;\n  height: 590px;\n\n  padding: 3px;\n\n  border-radius: var(--borderRadiusPrimary);\n\n  display: flex;\n  flex-direction: column;\n}\n\n#editor div {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 3px;\n}\n#editor input {\n  border: 1px solid rgb(200, 200, 200);\n  border-radius: var(--borderRadiusPrimary);\n  \n  margin-bottom: 5px;\n  padding: 2px 0 2px 5px;\n\n  height: 18px;\n  width: 95%;\n\n  font-size: 15px;\n  color: rgb(0, 0, 0) !important;\n}\n#editor label {\n  margin-bottom: 5px;\n}\n#editor textarea {\n  border-radius: var(--borderRadiusPrimary);\n  border: 1px solid rgb(200, 200, 200);\n\n  padding: 5px;\n  font-family: inherit;\n  color: rgb(0, 0, 0) !important;\n  resize: none;\n\n  height: 95px;\n  line-height: 1.3;\n  scroll-behavior: smooth;\n}\n\n#task-due-date {\n  font-size: 15px;\n  color: grey;\n}\n#editor strong {\n  font-size: 14px;\n  color: red;\n}\n.input-label {\n  margin-bottom: 5px;\n}\n\n/* radio buttons */\ninput[type=radio] {\n  all: revert;\n  accent-color: grey;\n\n  --pixels: 10px;\n  width: var(--pixels) !important;\n  height: var(--pixels) !important;\n}\n#priority-radio-buttons div {\n  display: flex;\n  flex-direction: row;\n  margin: 0 !important ;\n}\n/* priority tags */\n#priority-radio-buttons div label {\n  display: flex;\n  align-items: center;\n\n  font-size: 12px;\n  font-weight: bold;\n  margin-bottom: 2px;\n\n  padding: 2px 5px 2px 5px;\n\n  user-select: none;\n  cursor: pointer;\n}\n.priority-radio-buttons-wrapper , .radio-buttons-wrapper {\n  display: flex;\n  justify-content: space-around;\n}\n\n/* form buttons */\n.form-button {\n  width: fit-content;\n  padding: 4px 8px 4px 8px;\n\n  font-weight: bold;\n  font-size: 14px;\n\n  cursor: pointer;\n  user-select: none;\n\n  margin-top: 3px;\n}\n.button-wrapper {\n  display: flex;\n  flex-direction: row !important;\n  margin: 0;\n\n  gap: 8px;\n}\n.submit-button {\n  background-color: hsl(220, 72%, 60%);\n  color: white;\n  border-radius: var(--borderRadiusPrimary);\n  border: 1px rgba(37, 37, 254, 0.503) solid;\n}\n.submit-button:hover {\n  background-color: hsl(222, 83%, 65%);\n}\n.submit-button:active {\n  background-color: hsl(220, 66%, 55%);\n}\n.delete-button {\n  background-color: hsl(8, 72%, 55%);\n  color: white;\n  border-radius: var(--borderRadiusPrimary);\n  border: 1px rgb(163, 0, 0) solid;\n}\n.delete-button:hover{\n  background-color: hsl(8, 72%, 60%);\n}\n.delete-button:active{\n  background-color: hsl(8, 72%, 50%);\n}\n.cancel-button {\n  background-color: hsl(8, 72%, 55%);\n  color: white;\n  border-radius: var(--borderRadiusPrimary);\n  border: 1px rgb(163, 0, 0) solid;\n}\n.cancel-button:hover{\n  background-color: hsl(8, 72%, 60%);\n}\n.cancel-button:active{\n  background-color: hsl(8, 72%, 50%);\n}\n\n.error-msg {\n  color: red;\n  font-size: 12px;\n  margin: 0 !important;\n}\n/* default editor msg */\n.message-wrapper {\n  width: 100%;\n  height: 100%;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.message {\n  color: rgb(80,80,80);\n  user-select: none;\n}\n.message-small {\n  font-size: 12px;\n}\n\n/* Subtasks Section */\ninput[type="checkbox"] {\n  all: revert !important;\n  width: 12px !important;\n  height: 12px !important;\n  margin: 0 5px 0 5px !important;\n}\n.subtasks-wrapper {\n  overflow: auto;\n  width: 100%;\n  height: 90px;\n  \n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n  padding: 5px 3px 5px 3px;\n\n  outline: var(--borderPrimary);\n  border-radius: var(--borderRadiusPrimary);\n}\n.subtasks-wrapper .checkbox-item {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  font-size: 14px;\n  margin-bottom: 0;\n\n  cursor: pointer;\n  user-select: none;\n}\n.subtasks-wrapper .checkbox-item:hover {\n  background-color: whitesmoke;\n}\n\n/* Form complete option */\n.task-complete-radio-buttons {\n  display: flex !important;\n  flex-direction: row !important;\n  justify-content: start;\n  gap: 10px;\n\n  margin: 0 !important;\n}\n.task-complete-radio-buttons input[type="radio"] {\n  width: 13px !important;\n  height: 13px !important;\n  cursor: pointer;\n}\n.task-complete-radio-buttons label[class] {\n  cursor: pointer;\n  user-select: none;\n}\n.task-complete-radio-buttons div {\n  display: flex !important;\n  flex-direction: row !important;\n  margin: 0 !important;\n}\n\n/* modal + modal message styling */\n.overlay {\n  z-index: 9;\n  position: absolute;\n\n  width: 100vw;\n  height: 100vh;\n\n  background-color: rgba(255, 255, 255, 0.3);\n  backdrop-filter: blur(2px);\n}\n.modal {\n  width: clamp(275px, 290px, 300px);\n  height: 150px;\n  padding: 5px 8px 5px 8px;\n  background-color: whitesmoke;\n\n  z-index: 9;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-60%, -55%);\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 8px;\n\n  border-radius: var(--borderRadiusPrimary);\n  border: 1px solid rgb(220, 220, 220);\n} \n.modal-message {\n  text-align: center;\n  font-size: 18px;\n}\n.modal-buttons {\n  display: flex;\n  justify-content: center;\n  gap: 1rem;\n}\n.modal-button {\n  padding: 3px 14px 4px 14px;\n  cursor: pointer;\n  background-color: hsl(0, 0%, 86%);\n  border-radius: var(--borderRadiusPrimary);\n}\n.modal-button:hover {\n  background-color: hsl(0, 0%, 82%);;\n}\n.modal-button:active {\n  background-color: hsl(0, 0%, 78%);;\n}\n\n/* import/export button functionality + modal */\n.import-export-container {\n  height: 20px;\n  width: 100%;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.import-export-button, #import-export-modal button, ::file-selector-button, .ie-download-btn {\n  font-size: 12px;\n  font-family: inherit;\n  background-color: hsl(0, 0%, 96%);\n\n  padding: 3px 6px 3px 6px;\n  border-radius: var(--borderRadiusPrimary);\n  border: .5px solid rgb(199, 199, 199);\n  cursor: pointer;\n\n  width: max-content;\n}\n.import-export-button:hover, #import-export-modal button:hover, ::file-selector-button:hover, .ie-download-btn:hover {\n  background-color: hsl(0, 0%, 94%);\n}\n.import-export-button:active, #import-export-modal button:active, ::file-selector-button:active, .ie-download-btn:active {\n  background-color: hsl(0, 0%, 92%);\n}\n\n/* modal */\n#import-export-modal {\n  width: 225px;\n  height: 175px;\n  border-radius: var(--borderRadiusPrimary);\n\n  padding: 6px 8px 6px 8px;\n  outline: none;\n  border: .5px solid grey;\n\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  user-select: none;\n}\n#import-export-modal .message {\n  font-size: 12px;\n  color: black;\n\n  margin-bottom: 8px;\n}\n.wrapper {\n  display: flex;\n  flex-direction: column;\n\n  height: 100%;\n}\n.wrapper div {\n  margin-bottom: 5px;\n}\n#import-export-modal::backdrop {\n  background-color: rgba(255, 255, 255, 0.3);\n  backdrop-filter: blur(2px);\n}\n#import-data {\n  width: 200px;\n  font-size: 12px;\n  margin-bottom: 8px;\n}\n.ie-close-btn {\n  margin-left: auto;\n  margin-top: auto;\n}`, "",{"version":3,"sources":["webpack://./src/style.css"],"names":[],"mappings":"AAAA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,iBAAiB;EACjB,4CAA8C;AAChD;;AAEA;EACE,0BAA0B;EAC1B,6CAA6C;;EAE7C,0CAA0C;EAC1C,2CAA2C;AAC7C;;AAEA;;EAEE,WAAW;EACX,YAAY;AACd;AACA;EACE,aAAa;EACb,sCAAsC;EACtC,uBAAuB;EACvB,+CAA+C;EAC/C,QAAQ;;EAER,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,UAAU;AACZ;;AAEA,iBAAiB;AACjB;EACE,8BAA8B;;EAE9B,aAAa;EACb,sBAAsB;;EAEtB,YAAY;;EAEZ,4BAA4B;EAC5B,yCAAyC;AAC3C;AACA;EACE,mBAAmB;AACrB;AACA;EACE,aAAa;EACb,mBAAmB;;EAEnB,YAAY;EACZ,mBAAmB;EACnB,eAAe;AACjB;AACA;EACE,aAAa;EACb,mBAAmB;;EAEnB,YAAY;AACd;;AAEA,uBAAuB;AACvB;EACE,cAAc;EACd,iCAAiC;EACjC,gCAAgC;;EAEhC,aAAa;EACb,mBAAmB;;EAEnB,mBAAmB;EACnB,iBAAiB;;EAEjB,WAAW;EACX,YAAY;;EAEZ,wCAAwC;EACxC,yCAAyC;AAC3C;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;AACA;EACE,6BAA6B;EAC7B,+BAA+B;EAC/B,iBAAiB;;EAEjB,mBAAmB;AACrB;AACA,eAAe;AACf;EACE,YAAY;EACZ,oBAAoB;;EAEpB,iBAAiB;;EAEjB,sBAAsB;EACtB,yCAAyC;;EAEzC,uBAAuB;AACzB;;AAEA,kBAAkB;AAClB;EACE,eAAe;AACjB;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,QAAQ;;EAER,4CAA4C;;EAE5C,kBAAkB;EAClB,MAAM;EACN,QAAQ;EACR,SAAS;EACT,OAAO;AACT;AACA;EACE,UAAU;EACV,YAAY;;EAEZ,aAAa;EACb,mBAAmB;;EAEnB,gBAAgB;EAChB,eAAe;EACf,oBAAoB;;EAEpB,YAAY;EACZ,yCAAyC;;EAEzC,qCAAqC;;EAErC,eAAe;AACjB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,qCAAqC;AACvC;AACA;EACE,qCAAqC;AACvC;AACA,kCAAkC;AAClC;EACE,UAAU;AACZ;AACA;EACE,UAAU;EACV,kBAAkB;EAClB,SAAS;EACT,SAAS;;EAET,eAAe;EACf,qCAAqC;EACrC,mDAAmD;EACnD,sCAAsC;EACtC,gBAAgB;AAClB;AACA;EACE,gBAAgB;;EAEhB,aAAa;EACb,mBAAmB;EACnB,gBAAgB;;EAEhB,YAAY;EACZ,YAAY;;EAEZ,eAAe;EACf,iBAAiB;AACnB;AACA;EACE,qCAAqC;AACvC;AACA;EACE,qCAAqC;AACvC;;;AAGA,qBAAqB;AACrB;EACE,cAAc;AAChB;;AAEA,cAAc;AACd;EACE,UAAU;AACZ;AACA;EACE,eAAe;EACf,kBAAkB;;EAElB,4BAA4B;EAC5B,yCAAyC;;EAEzC,wBAAwB;EACxB,kBAAkB;;EAElB,oCAAoC;;EAEpC,eAAe;AACjB;AACA;EACE,6CAA6C;AAC/C;AACA;EACE,8CAA8C;AAChD;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,gBAAgB;EAChB,eAAe;;EAEf,kBAAkB;EAClB,UAAU;EACV,kBAAkB;;EAElB,YAAY;EACZ,oCAAoC;;EAEpC,uDAAuD;EACvD,oDAAoD;EACpD,+CAA+C;AACjD;AACA;EACE,eAAe;EACf,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,6CAA6C;AAC/C;AACA;EACE,8CAA8C;AAChD;AACA,KAAK;;;AAGL;EACE,gBAAgB;EAChB,4BAA4B;EAC5B,yCAAyC;AAC3C;AACA;EACE,cAAc;;EAEd,aAAa;EACb,sBAAsB;EACtB,cAAc;EACd,QAAQ;;EAER,aAAa;AACf;AACA,yBAAyB;AACzB;EACE,YAAY;EACZ,YAAY;EACZ,eAAe;;EAEf,aAAa;EACb,mBAAmB;;EAEnB,yCAAyC;EACzC,oCAAoC;;EAEpC,eAAe;AACjB;AACA;EACE,oCAAoC;AACtC;AACA;EACE,oCAAoC;AACtC;AACA,iCAAiC,eAAe;EAC9C,aAAa;EACb,sBAAsB;EACtB,QAAQ;AACV;AACA;EACE,aAAa;AACf;AACA;EACE,iBAAiB;EACjB,eAAe;AACjB;AACA;EACE,eAAe;AACjB;AACA;EACE,iBAAiB;EACjB,wBAAwB;;EAExB,eAAe;EACf,iBAAiB;;EAEjB,yCAAyC;AAC3C;AACA;EACE,eAAe;EACf,wBAAwB;EACxB,yBAAyB;;EAEzB,wBAAwB;EACxB,kBAAkB;AACpB;;AAEA,cAAc;AACd;EACE,oCAAoC;EACpC,qBAAqB;EACrB,yCAAyC;EACzC,gCAAgC,EAAE,eAAe;EACjD,iBAAiB;AACnB;AACA;EACE,uCAAuC;EACvC,uBAAuB;EACvB,yCAAyC;EACzC,kCAAkC;EAClC,iBAAiB;AACnB;AACA;EACE,qCAAqC;EACrC,qBAAqB;EACrB,yCAAyC;EACzC,gCAAgC;EAChC,iBAAiB;AACnB;AACA;EACE,yCAAyC;EACzC,YAAY;EACZ,yCAAyC;EACzC,yCAAyC;EACzC,iBAAiB;AACnB;;AAEA,yBAAyB;AACzB;EACE,4BAA4B;EAC5B,yCAAyC;;EAEzC,YAAY;;EAEZ,aAAa;EACb,sBAAsB;AACxB;AACA;EACE,aAAa;EACb,mBAAmB;AACrB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,oBAAoB;EACpB,WAAW;EACX,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,yCAAyC;EACzC,gBAAgB;AAClB;AACA;EACE,cAAc;EACd,aAAa;;EAEb,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;AACA,iBAAiB;AACjB;EACE,YAAY;EACZ,YAAY;;EAEZ,aAAa;EACb,mBAAmB;EACnB,cAAc;;EAEd,oBAAoB;EACpB,gBAAgB;;EAEhB,yCAAyC;EACzC,4BAA4B;;EAE5B,eAAe;AACjB;AACA;EACE,oCAAoC;AACtC;AACA;EACE,oCAAoC;AACtC;;AAEA;EACE,eAAe;AACjB;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;;EAET,eAAe;;EAEf,eAAe;EACf,iBAAiB;AACnB;AACA;EACE,oCAAoC;EACpC,wBAAwB;AAC1B;AACA;EACE,sCAAsC;EACtC,wBAAwB;AAC1B;AACA;EACE,yCAAyC;EACzC,wBAAwB;AAC1B;;AAEA,mBAAmB;AACnB;EACE,4BAA4B;EAC5B,yCAAyC;;EAEzC,YAAY;AACd;AACA;EACE,gBAAgB;AAClB;AACA;EACE,WAAW;EACX,aAAa;;EAEb,YAAY;;EAEZ,yCAAyC;;EAEzC,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,kBAAkB;AACpB;AACA;EACE,oCAAoC;EACpC,yCAAyC;;EAEzC,kBAAkB;EAClB,sBAAsB;;EAEtB,YAAY;EACZ,UAAU;;EAEV,eAAe;EACf,8BAA8B;AAChC;AACA;EACE,kBAAkB;AACpB;AACA;EACE,yCAAyC;EACzC,oCAAoC;;EAEpC,YAAY;EACZ,oBAAoB;EACpB,8BAA8B;EAC9B,YAAY;;EAEZ,YAAY;EACZ,gBAAgB;EAChB,uBAAuB;AACzB;;AAEA;EACE,eAAe;EACf,WAAW;AACb;AACA;EACE,eAAe;EACf,UAAU;AACZ;AACA;EACE,kBAAkB;AACpB;;AAEA,kBAAkB;AAClB;EACE,WAAW;EACX,kBAAkB;;EAElB,cAAc;EACd,+BAA+B;EAC/B,gCAAgC;AAClC;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,qBAAqB;AACvB;AACA,kBAAkB;AAClB;EACE,aAAa;EACb,mBAAmB;;EAEnB,eAAe;EACf,iBAAiB;EACjB,kBAAkB;;EAElB,wBAAwB;;EAExB,iBAAiB;EACjB,eAAe;AACjB;AACA;EACE,aAAa;EACb,6BAA6B;AAC/B;;AAEA,iBAAiB;AACjB;EACE,kBAAkB;EAClB,wBAAwB;;EAExB,iBAAiB;EACjB,eAAe;;EAEf,eAAe;EACf,iBAAiB;;EAEjB,eAAe;AACjB;AACA;EACE,aAAa;EACb,8BAA8B;EAC9B,SAAS;;EAET,QAAQ;AACV;AACA;EACE,oCAAoC;EACpC,YAAY;EACZ,yCAAyC;EACzC,0CAA0C;AAC5C;AACA;EACE,oCAAoC;AACtC;AACA;EACE,oCAAoC;AACtC;AACA;EACE,kCAAkC;EAClC,YAAY;EACZ,yCAAyC;EACzC,gCAAgC;AAClC;AACA;EACE,kCAAkC;AACpC;AACA;EACE,kCAAkC;AACpC;AACA;EACE,kCAAkC;EAClC,YAAY;EACZ,yCAAyC;EACzC,gCAAgC;AAClC;AACA;EACE,kCAAkC;AACpC;AACA;EACE,kCAAkC;AACpC;;AAEA;EACE,UAAU;EACV,eAAe;EACf,oBAAoB;AACtB;AACA,uBAAuB;AACvB;EACE,WAAW;EACX,YAAY;;EAEZ,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;AACA;EACE,oBAAoB;EACpB,iBAAiB;AACnB;AACA;EACE,eAAe;AACjB;;AAEA,qBAAqB;AACrB;EACE,sBAAsB;EACtB,sBAAsB;EACtB,uBAAuB;EACvB,8BAA8B;AAChC;AACA;EACE,cAAc;EACd,WAAW;EACX,YAAY;;EAEZ,aAAa;EACb,sBAAsB;EACtB,QAAQ;EACR,wBAAwB;;EAExB,6BAA6B;EAC7B,yCAAyC;AAC3C;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;;EAEnB,eAAe;EACf,gBAAgB;;EAEhB,eAAe;EACf,iBAAiB;AACnB;AACA;EACE,4BAA4B;AAC9B;;AAEA,yBAAyB;AACzB;EACE,wBAAwB;EACxB,8BAA8B;EAC9B,sBAAsB;EACtB,SAAS;;EAET,oBAAoB;AACtB;AACA;EACE,sBAAsB;EACtB,uBAAuB;EACvB,eAAe;AACjB;AACA;EACE,eAAe;EACf,iBAAiB;AACnB;AACA;EACE,wBAAwB;EACxB,8BAA8B;EAC9B,oBAAoB;AACtB;;AAEA,kCAAkC;AAClC;EACE,UAAU;EACV,kBAAkB;;EAElB,YAAY;EACZ,aAAa;;EAEb,0CAA0C;EAC1C,0BAA0B;AAC5B;AACA;EACE,iCAAiC;EACjC,aAAa;EACb,wBAAwB;EACxB,4BAA4B;;EAE5B,UAAU;EACV,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,gCAAgC;;EAEhC,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,QAAQ;;EAER,yCAAyC;EACzC,oCAAoC;AACtC;AACA;EACE,kBAAkB;EAClB,eAAe;AACjB;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,SAAS;AACX;AACA;EACE,0BAA0B;EAC1B,eAAe;EACf,iCAAiC;EACjC,yCAAyC;AAC3C;AACA;EACE,iCAAiC;AACnC;AACA;EACE,iCAAiC;AACnC;;AAEA,+CAA+C;AAC/C;EACE,YAAY;EACZ,WAAW;;EAEX,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;AACA;EACE,eAAe;EACf,oBAAoB;EACpB,iCAAiC;;EAEjC,wBAAwB;EACxB,yCAAyC;EACzC,qCAAqC;EACrC,eAAe;;EAEf,kBAAkB;AACpB;AACA;EACE,iCAAiC;AACnC;AACA;EACE,iCAAiC;AACnC;;AAEA,UAAU;AACV;EACE,YAAY;EACZ,aAAa;EACb,yCAAyC;;EAEzC,wBAAwB;EACxB,aAAa;EACb,uBAAuB;;EAEvB,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,iBAAiB;AACnB;AACA;EACE,eAAe;EACf,YAAY;;EAEZ,kBAAkB;AACpB;AACA;EACE,aAAa;EACb,sBAAsB;;EAEtB,YAAY;AACd;AACA;EACE,kBAAkB;AACpB;AACA;EACE,0CAA0C;EAC1C,0BAA0B;AAC5B;AACA;EACE,YAAY;EACZ,eAAe;EACf,kBAAkB;AACpB;AACA;EACE,iBAAiB;EACjB,gBAAgB;AAClB","sourcesContent":["* {\\n  margin: 0;\\n  padding: 0;\\n  box-sizing: border-box;\\n}\\n\\n@font-face {\\n  font-family: Lato;\\n  src: url(\\"./assets/fonts/lato/Lato-Light.ttf\\");\\n}\\n\\n:root {\\n  --borderRadiusPrimary: 5px;\\n  --borderPrimary: 1px rgb(215, 215, 215) solid;\\n\\n  --whiteSmokeHoverColor: rgb(235, 235, 235);\\n  --whiteSmokeActiveColor: rgb(228, 228, 228);\\n}\\n\\nhtml,\\nbody {\\n  width: 100%;\\n  height: 100%;\\n}\\nbody {\\n  display: grid;\\n  grid-template-columns: 290px 1fr 300px;\\n  grid-template-rows: 1fr;\\n  grid-template-areas: \\"menu main-display editor\\";\\n  gap: 5px;\\n\\n  font-family: Lato;\\n  position: relative;\\n}\\n\\n.icon {\\n  width: 18px;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\ninput {\\n  all: unset;\\n}\\n\\n/* menu section */\\n#menu {\\n  --innerMenuLeftBoxPadding: 2px;\\n\\n  display: flex;\\n  flex-direction: column;\\n\\n  padding: 5px;\\n\\n  border: var(--borderPrimary);\\n  border-radius: var(--borderRadiusPrimary);\\n}\\n#menu section {\\n  margin: 8px 0 4px 0;\\n}\\nh1 {\\n  display: flex;\\n  align-items: center;\\n\\n  height: 35px;\\n  margin: 5px 0 5px 0;\\n  font-size: 30px;\\n}\\nh3 {\\n  display: flex;\\n  align-items: center;\\n\\n  height: 30px;\\n}\\n\\n/* search bar section */\\n.search-bar {\\n  --pixels: 25px;\\n  --searchIconHeight: var(--pixels);\\n  --searchIconWidth: var(--pixels);\\n\\n  display: flex;\\n  align-items: center;\\n\\n  margin: 0!important;\\n  padding-left: 8px;\\n\\n  width: 100%;\\n  height: 50px;\\n\\n  background-color: rgba(16, 249, 16, 0.2);\\n  border-radius: var(--borderRadiusPrimary);\\n}\\n.search-bar label {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.search-icon {\\n  width: var(--searchIconWidth);\\n  height: var(--searchIconHeight);\\n  margin-right: 5px;\\n\\n  filter: opacity(.7);\\n}\\n/* actual bar */\\n#search-bar {\\n  height: 25px;\\n  font-family: inherit;\\n\\n  padding-left: 8px;\\n\\n  border: 1px solid grey;\\n  border-radius: var(--borderRadiusPrimary);\\n\\n  background-color: white;\\n}\\n\\n/* tasks section */\\n#tasks {\\n  flex: 0 0 150px;\\n}\\n.task-btn-container {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 5px;\\n\\n  padding-left: var(--innerMenuLeftBoxPadding);\\n\\n  position: relative;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n}\\n.task-btn-container button {\\n  width: 98%;\\n  height: 28px;\\n\\n  display: flex;\\n  align-items: center;\\n  \\n  text-align: left;\\n  font-size: 16px;\\n  font-family: inherit;\\n\\n  border: none;\\n  border-radius: var(--borderRadiusPrimary);\\n\\n  background-color: hsl(210, 100%, 90%);\\n  \\n  cursor: pointer;\\n}\\n.task-btn-container .icon {\\n  margin: 0 6px 0 3px;\\n}\\n.task-btn-container button:hover {\\n  background-color: hsl(210, 100%, 87%);\\n}\\n.task-btn-container button:active {\\n  background-color: hsl(210, 100%, 85%);\\n}\\n/* add new task/project dropdown */\\n.task-btn-container button:first-of-type {\\n  z-index: 3;\\n}\\n.task-create-new-options {\\n  z-index: 2;\\n  position: absolute;\\n  top: 28px;\\n  left: 8px;\\n\\n  font-size: 15px;\\n  background-color: hsl(210, 100%, 95%);\\n  /* box-shadow: 0 4px 6px -2px rgba(0, 0, 0, 0.3); */\\n  border: .5px hsl(210, 100%, 80%) solid;\\n  border-top: none;\\n}\\n.task-create-new-options li {\\n  list-style: none;\\n\\n  display: flex;\\n  align-items: center;\\n  text-align: left;\\n\\n  height: 28px;\\n  padding: 5px;\\n\\n  cursor: pointer;\\n  user-select: none;\\n}\\n.task-create-new-options li:hover {\\n  background-color: hsl(210, 100%, 92%);\\n}\\n.task-create-new-options li:active {\\n  background-color: hsl(210, 100%, 90%);\\n}\\n\\n\\n/* projects section */\\n#projects {\\n  flex: 1 0 auto;\\n}\\n\\n/* drop down */\\nbutton {\\n  all: unset;\\n}\\n.sort-by-button {\\n  font-size: 14px;\\n  width: fit-content;\\n\\n  border: var(--borderPrimary);\\n  border-radius: var(--borderRadiusPrimary);\\n\\n  padding: 2px 4px 2px 4px;\\n  margin-bottom: 3px;\\n\\n  background-color: rgb(250, 250, 250);\\n\\n  cursor: pointer;\\n}\\n.sort-by-button:hover {\\n  background-color: var(--whiteSmokeHoverColor);\\n}\\n.sort-by-button:active {\\n  background-color: var(--whiteSmokeActiveColor);\\n}\\n\\n.hidden {\\n  display: none !important;\\n}\\n\\n.sort-options {\\n  list-style: none;\\n  font-size: 12px;\\n\\n  width: fit-content;\\n  z-index: 2;\\n  position: absolute;\\n\\n  padding: 3px;\\n  background-color: rgb(250, 250, 250);\\n\\n  -webkit-box-shadow: 0px 0px 8px 1px rgba(196,196,196,1);\\n  -moz-box-shadow: 0px 0px 8px 1px rgba(196,196,196,1);\\n  box-shadow: 0px 0px 8px 1px rgba(196,196,196,1);\\n}\\n.sort-options li {\\n  cursor: pointer;\\n  user-select: none;\\n  margin-bottom: 2px;\\n}\\n.sort-options li:hover {\\n  background-color: var(--whiteSmokeHoverColor);\\n}\\n.sort-options li:active {\\n  background-color: var(--whiteSmokeActiveColor);\\n}\\n/*  */\\n\\n\\n.projects-wrapper {\\n  overflow: hidden;\\n  border: 1px solid whitesmoke;\\n  border-radius: var(--borderRadiusPrimary);\\n}\\n.project-container {\\n  overflow: auto;\\n\\n  display: flex;\\n  flex-direction: column;\\n  flex-shrink: 0;\\n  gap: 5px;\\n\\n  height: 280px;\\n}\\n/* project item styling */\\n.project-item {\\n  height: 50px;\\n  padding: 5px;\\n  font-size: 15px;\\n\\n  display: flex;\\n  align-items: center;\\n\\n  border-radius: var(--borderRadiusPrimary);\\n  background-color: rgb(250, 250, 250);\\n\\n  cursor: pointer;\\n}\\n.project-item:hover {\\n  background-color: rgb(242, 242, 242);\\n}\\n.project-item:active {\\n  background-color: rgb(232, 232, 232);\\n}\\n.project-item div:first-of-type {/*no class div*/\\n  display: flex;\\n  flex-direction: column;\\n  gap: 3px;\\n}\\n.project-info-wrapper {\\n  display: flex;\\n}\\n.project-title {\\n  user-select: none;\\n  font-size: 15px;\\n}\\n.project-due-date {\\n  font-size: 13px;\\n}\\n.project-priority, .card-priority {\\n  margin-left: auto;\\n  padding: 5px 8px 5px 8px;\\n\\n  font-size: 12px;\\n  font-weight: bold;\\n\\n  border-radius: var(--borderRadiusPrimary);\\n}\\n.project-is-complete {\\n  font-size: 11px;\\n  padding: 1px 2px 1px 2px;\\n  background-color: #DDDDDD;\\n\\n  margin: 0px 0px 4px 20px;\\n  align-self: center;\\n}\\n\\n/* prio tags */\\n.low {\\n  background-color: rgb(0, 190, 0, .4);\\n  color: rgb(0, 128, 0);\\n  border-radius: var(--borderRadiusPrimary);\\n  border: 1px solid rgb(0, 128, 0); /*70% of bgcol*/\\n  user-select: none;\\n}\\n.medium {\\n  background-color: rgba(255, 255, 0, .4);\\n  color: rgb(100, 100, 0);\\n  border-radius: var(--borderRadiusPrimary);\\n  border: 1px solid rgb(170, 170, 0);\\n  user-select: none;\\n}\\n.high {\\n  background-color: rgba(255, 0, 0, .4);\\n  color: rgb(120, 0, 0);\\n  border-radius: var(--borderRadiusPrimary);\\n  border: 1px solid rgb(190, 0, 0);\\n  user-select: none;\\n}\\n.critical {\\n  background-color: rgba(156, 56, 255, 0.9);\\n  color: white;\\n  border-radius: var(--borderRadiusPrimary);\\n  border: 1px solid rgba(100, 56, 205, 0.9);\\n  user-select: none;\\n}\\n\\n/* main display section */\\n#main-display {\\n  border: var(--borderPrimary);\\n  border-radius: var(--borderRadiusPrimary);\\n\\n  padding: 5px;\\n\\n  display: flex;\\n  flex-direction: column;\\n}\\n.main-title-date-wrapper {\\n  display: flex;\\n  align-items: center;\\n}\\n.main-title {\\n  margin-left: 3px;\\n}\\n.main-date {\\n  margin: 5px 0 0 20px;\\n  color: grey;\\n  font-size: 22px;\\n  font-weight: 100;\\n}\\n\\n.card-container-wrapper {\\n  border-radius: var(--borderRadiusPrimary);\\n  overflow: hidden;\\n}\\n.card-container {\\n  overflow: auto;\\n  height: 576px;\\n  \\n  display: flex;\\n  flex-direction: column;\\n  gap: 13px;\\n}\\n/* card styling */\\n.card {\\n  width: 580px;\\n  height: 55px;\\n\\n  display: flex;\\n  align-items: center;\\n  flex-shrink: 0;\\n\\n  padding: 0 8px 0 8px;\\n  margin-left: 3px;\\n\\n  border-radius: var(--borderRadiusPrimary);\\n  background-color: whitesmoke;\\n\\n  cursor: pointer;\\n}\\n.card:hover {\\n  background-color: rgb(240, 240, 240);\\n}\\n.card:active {\\n  background-color: rgb(235, 235, 235);\\n}\\n\\n.card-title {\\n  font-size: 20px;\\n}\\n.card-info-wrapper {\\n  display: flex;\\n  align-items: center;\\n  gap: 1rem;\\n\\n  margin-top: 2px;\\n\\n  font-size: 13px;\\n  user-select: none;\\n}\\n.card-complete-status {\\n  background-color: rgb(221, 221, 221);\\n  padding: 1px 2px 1px 2px;\\n}\\n.card-project-link {\\n  background-color: rgb(221, 133, 0, .3);\\n  padding: 1px 3px 1px 3px;\\n}\\n.card-is-project {\\n  background-color: rgba(255, 106, 0, 0.25);\\n  padding: 1px 3px 1px 3px;\\n}\\n\\n/* editor section */\\n#editor {\\n  border: var(--borderPrimary);\\n  border-radius: var(--borderRadiusPrimary);\\n\\n  padding: 5px;\\n}\\n.editor-title {\\n  margin-left: 3px;\\n}\\n#editor form {\\n  width: 100%;\\n  height: 590px;\\n\\n  padding: 3px;\\n\\n  border-radius: var(--borderRadiusPrimary);\\n\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n#editor div {\\n  display: flex;\\n  flex-direction: column;\\n  margin-bottom: 3px;\\n}\\n#editor input {\\n  border: 1px solid rgb(200, 200, 200);\\n  border-radius: var(--borderRadiusPrimary);\\n  \\n  margin-bottom: 5px;\\n  padding: 2px 0 2px 5px;\\n\\n  height: 18px;\\n  width: 95%;\\n\\n  font-size: 15px;\\n  color: rgb(0, 0, 0) !important;\\n}\\n#editor label {\\n  margin-bottom: 5px;\\n}\\n#editor textarea {\\n  border-radius: var(--borderRadiusPrimary);\\n  border: 1px solid rgb(200, 200, 200);\\n\\n  padding: 5px;\\n  font-family: inherit;\\n  color: rgb(0, 0, 0) !important;\\n  resize: none;\\n\\n  height: 95px;\\n  line-height: 1.3;\\n  scroll-behavior: smooth;\\n}\\n\\n#task-due-date {\\n  font-size: 15px;\\n  color: grey;\\n}\\n#editor strong {\\n  font-size: 14px;\\n  color: red;\\n}\\n.input-label {\\n  margin-bottom: 5px;\\n}\\n\\n/* radio buttons */\\ninput[type=radio] {\\n  all: revert;\\n  accent-color: grey;\\n\\n  --pixels: 10px;\\n  width: var(--pixels) !important;\\n  height: var(--pixels) !important;\\n}\\n#priority-radio-buttons div {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0 !important ;\\n}\\n/* priority tags */\\n#priority-radio-buttons div label {\\n  display: flex;\\n  align-items: center;\\n\\n  font-size: 12px;\\n  font-weight: bold;\\n  margin-bottom: 2px;\\n\\n  padding: 2px 5px 2px 5px;\\n\\n  user-select: none;\\n  cursor: pointer;\\n}\\n.priority-radio-buttons-wrapper , .radio-buttons-wrapper {\\n  display: flex;\\n  justify-content: space-around;\\n}\\n\\n/* form buttons */\\n.form-button {\\n  width: fit-content;\\n  padding: 4px 8px 4px 8px;\\n\\n  font-weight: bold;\\n  font-size: 14px;\\n\\n  cursor: pointer;\\n  user-select: none;\\n\\n  margin-top: 3px;\\n}\\n.button-wrapper {\\n  display: flex;\\n  flex-direction: row !important;\\n  margin: 0;\\n\\n  gap: 8px;\\n}\\n.submit-button {\\n  background-color: hsl(220, 72%, 60%);\\n  color: white;\\n  border-radius: var(--borderRadiusPrimary);\\n  border: 1px rgba(37, 37, 254, 0.503) solid;\\n}\\n.submit-button:hover {\\n  background-color: hsl(222, 83%, 65%);\\n}\\n.submit-button:active {\\n  background-color: hsl(220, 66%, 55%);\\n}\\n.delete-button {\\n  background-color: hsl(8, 72%, 55%);\\n  color: white;\\n  border-radius: var(--borderRadiusPrimary);\\n  border: 1px rgb(163, 0, 0) solid;\\n}\\n.delete-button:hover{\\n  background-color: hsl(8, 72%, 60%);\\n}\\n.delete-button:active{\\n  background-color: hsl(8, 72%, 50%);\\n}\\n.cancel-button {\\n  background-color: hsl(8, 72%, 55%);\\n  color: white;\\n  border-radius: var(--borderRadiusPrimary);\\n  border: 1px rgb(163, 0, 0) solid;\\n}\\n.cancel-button:hover{\\n  background-color: hsl(8, 72%, 60%);\\n}\\n.cancel-button:active{\\n  background-color: hsl(8, 72%, 50%);\\n}\\n\\n.error-msg {\\n  color: red;\\n  font-size: 12px;\\n  margin: 0 !important;\\n}\\n/* default editor msg */\\n.message-wrapper {\\n  width: 100%;\\n  height: 100%;\\n\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.message {\\n  color: rgb(80,80,80);\\n  user-select: none;\\n}\\n.message-small {\\n  font-size: 12px;\\n}\\n\\n/* Subtasks Section */\\ninput[type=\\"checkbox\\"] {\\n  all: revert !important;\\n  width: 12px !important;\\n  height: 12px !important;\\n  margin: 0 5px 0 5px !important;\\n}\\n.subtasks-wrapper {\\n  overflow: auto;\\n  width: 100%;\\n  height: 90px;\\n  \\n  display: flex;\\n  flex-direction: column;\\n  gap: 2px;\\n  padding: 5px 3px 5px 3px;\\n\\n  outline: var(--borderPrimary);\\n  border-radius: var(--borderRadiusPrimary);\\n}\\n.subtasks-wrapper .checkbox-item {\\n  display: flex;\\n  flex-direction: row;\\n  align-items: center;\\n\\n  font-size: 14px;\\n  margin-bottom: 0;\\n\\n  cursor: pointer;\\n  user-select: none;\\n}\\n.subtasks-wrapper .checkbox-item:hover {\\n  background-color: whitesmoke;\\n}\\n\\n/* Form complete option */\\n.task-complete-radio-buttons {\\n  display: flex !important;\\n  flex-direction: row !important;\\n  justify-content: start;\\n  gap: 10px;\\n\\n  margin: 0 !important;\\n}\\n.task-complete-radio-buttons input[type=\\"radio\\"] {\\n  width: 13px !important;\\n  height: 13px !important;\\n  cursor: pointer;\\n}\\n.task-complete-radio-buttons label[class] {\\n  cursor: pointer;\\n  user-select: none;\\n}\\n.task-complete-radio-buttons div {\\n  display: flex !important;\\n  flex-direction: row !important;\\n  margin: 0 !important;\\n}\\n\\n/* modal + modal message styling */\\n.overlay {\\n  z-index: 9;\\n  position: absolute;\\n\\n  width: 100vw;\\n  height: 100vh;\\n\\n  background-color: rgba(255, 255, 255, 0.3);\\n  backdrop-filter: blur(2px);\\n}\\n.modal {\\n  width: clamp(275px, 290px, 300px);\\n  height: 150px;\\n  padding: 5px 8px 5px 8px;\\n  background-color: whitesmoke;\\n\\n  z-index: 9;\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n  transform: translate(-60%, -55%);\\n\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  gap: 8px;\\n\\n  border-radius: var(--borderRadiusPrimary);\\n  border: 1px solid rgb(220, 220, 220);\\n} \\n.modal-message {\\n  text-align: center;\\n  font-size: 18px;\\n}\\n.modal-buttons {\\n  display: flex;\\n  justify-content: center;\\n  gap: 1rem;\\n}\\n.modal-button {\\n  padding: 3px 14px 4px 14px;\\n  cursor: pointer;\\n  background-color: hsl(0, 0%, 86%);\\n  border-radius: var(--borderRadiusPrimary);\\n}\\n.modal-button:hover {\\n  background-color: hsl(0, 0%, 82%);;\\n}\\n.modal-button:active {\\n  background-color: hsl(0, 0%, 78%);;\\n}\\n\\n/* import/export button functionality + modal */\\n.import-export-container {\\n  height: 20px;\\n  width: 100%;\\n\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.import-export-button, #import-export-modal button, ::file-selector-button, .ie-download-btn {\\n  font-size: 12px;\\n  font-family: inherit;\\n  background-color: hsl(0, 0%, 96%);\\n\\n  padding: 3px 6px 3px 6px;\\n  border-radius: var(--borderRadiusPrimary);\\n  border: .5px solid rgb(199, 199, 199);\\n  cursor: pointer;\\n\\n  width: max-content;\\n}\\n.import-export-button:hover, #import-export-modal button:hover, ::file-selector-button:hover, .ie-download-btn:hover {\\n  background-color: hsl(0, 0%, 94%);\\n}\\n.import-export-button:active, #import-export-modal button:active, ::file-selector-button:active, .ie-download-btn:active {\\n  background-color: hsl(0, 0%, 92%);\\n}\\n\\n/* modal */\\n#import-export-modal {\\n  width: 225px;\\n  height: 175px;\\n  border-radius: var(--borderRadiusPrimary);\\n\\n  padding: 6px 8px 6px 8px;\\n  outline: none;\\n  border: .5px solid grey;\\n\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n  transform: translate(-50%, -50%);\\n  user-select: none;\\n}\\n#import-export-modal .message {\\n  font-size: 12px;\\n  color: black;\\n\\n  margin-bottom: 8px;\\n}\\n.wrapper {\\n  display: flex;\\n  flex-direction: column;\\n\\n  height: 100%;\\n}\\n.wrapper div {\\n  margin-bottom: 5px;\\n}\\n#import-export-modal::backdrop {\\n  background-color: rgba(255, 255, 255, 0.3);\\n  backdrop-filter: blur(2px);\\n}\\n#import-data {\\n  width: 200px;\\n  font-size: 12px;\\n  margin-bottom: 8px;\\n}\\n.ie-close-btn {\\n  margin-left: auto;\\n  margin-top: auto;\\n}"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///208\n')},314:module=>{eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = "";\n      var needLayer = typeof item[5] !== "undefined";\n      if (item[4]) {\n        content += "@supports (".concat(item[4], ") {");\n      }\n      if (item[2]) {\n        content += "@media ".concat(item[2], " {");\n      }\n      if (needLayer) {\n        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += "}";\n      }\n      if (item[2]) {\n        content += "}";\n      }\n      if (item[4]) {\n        content += "}";\n      }\n      return content;\n    }).join("");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === "string") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== "undefined") {\n        if (typeof item[5] === "undefined") {\n          item[5] = layer;\n        } else {\n          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = "".concat(supports);\n        } else {\n          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzRkFBc0YscUJBQXFCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixpREFBaUQscUJBQXFCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzREFBc0QscUJBQXFCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcz8yNGZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///314\n')},417:module=>{eval('\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    options = {};\n  }\n  if (!url) {\n    return url;\n  }\n  url = String(url.__esModule ? url.default : url);\n\n  // If url is already wrapped in quotes, remove them\n  if (/^[\'"].*[\'"]$/.test(url)) {\n    url = url.slice(1, -1);\n  }\n  if (options.hash) {\n    url += options.hash;\n  }\n\n  // Should url be wrapped?\n  // See https://drafts.csswg.org/css-values-3/#urls\n  if (/["\'() \\t\\n]|(%20)/.test(url) || options.needQuotes) {\n    return "\\"".concat(url.replace(/"/g, \'\\\\"\').replace(/\\n/g, "\\\\n"), "\\"");\n  }\n  return url;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE3LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcz8xZGU1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7XG5cbiAgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH1cblxuICAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG4gIGlmICgvW1wiJygpIFxcdFxcbl18KCUyMCkvLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuICByZXR1cm4gdXJsO1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///417\n')},354:module=>{eval('\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === "function") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n    var sourceMapping = "/*# ".concat(data, " */");\n    return [content].concat([sourceMapping]).join("\\n");\n  }\n  return [content].join("\\n");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsY0FBYztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzP2FmMTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///354\n')},72:module=>{eval('\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = "".concat(id, " ").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw2QkFBNkI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzPzJkYmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///72\n')},659:module=>{eval('\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === "undefined") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error("Couldn\'t find a style target. This probably means that the value for the \'insert\' parameter is invalid.");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjU5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzP2IyMTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///659\n')},540:module=>{eval('\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement("style");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQwLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzP2RlNmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///540\n')},56:(module,__unused_webpack_exports,__webpack_require__)=>{eval('\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute("nonce", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLGNBQWMsS0FBd0MsR0FBRyxzQkFBaUIsR0FBRyxDQUFJO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzP2RkY2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///56\n')},825:module=>{eval('\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = "";\n  if (obj.supports) {\n    css += "@supports (".concat(obj.supports, ") {");\n  }\n  if (obj.media) {\n    css += "@media ".concat(obj.media, " {");\n  }\n  var needLayer = typeof obj.layer !== "undefined";\n  if (needLayer) {\n    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += "}";\n  }\n  if (obj.media) {\n    css += "}";\n  }\n  if (obj.supports) {\n    css += "}";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== "undefined") {\n    css += "\\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === "undefined") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI1LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzP2U0NzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///825\n')},113:module=>{eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzPzFkZGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///113\n")},86:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(72);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js\nvar styleDomAPI = __webpack_require__(825);\nvar styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js\nvar insertBySelector = __webpack_require__(659);\nvar insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\nvar setAttributesWithoutAttributes = __webpack_require__(56);\nvar setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js\nvar insertStyleElement = __webpack_require__(540);\nvar insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js\nvar styleTagTransform = __webpack_require__(113);\nvar styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/style.css\nvar style = __webpack_require__(208);\n;// ./src/style.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (styleTagTransform_default());\noptions.setAttributes = (setAttributesWithoutAttributes_default());\noptions.insert = insertBySelector_default().bind(null, "head");\noptions.domAPI = (styleDomAPI_default());\noptions.insertStyleElement = (insertStyleElement_default());\n\nvar update = injectStylesIntoStyleTag_default()(style/* default */.A, options);\n\n\n\n\n       /* harmony default export */ const src_style = (style/* default */.A && style/* default */.A.locals ? style/* default */.A.locals : undefined);\n\n;// ./src/assets/fonts/lato/Lato-Medium.ttf\nconst Lato_Medium_namespaceObject = __webpack_require__.p + "dffae17524847ef31d01.ttf";\n;// ./src/Storage.js\nconst Storage = {\n  //where key is a task title/project title\n  //where object is an object\n  set(key, object) {\n    if (!key) {\n      throw new Error("Please provide a valid key");\n    };\n    if (!object) {\n      throw new Error("Please provide valid data");\n    };\n    //allow updating\n    localStorage.setItem(key, JSON.stringify(object));\n  },\n\n  getItem(key) {\n    if (!key) {\n      throw new Error("Please provide a valid key");\n    };\n    return JSON.parse(localStorage.getItem(key))\n  },\n\n  getKey(index) {\n    if (typeof index === "string") {\n      throw new Error("Please provide a valid index");\n    }\n    return localStorage.key(index);\n  },\n\n  remove(key){\n    if (!key) {\n      throw new Error("Please provide a valid key");\n    };\n    localStorage.removeItem(key);\n  },\n\n  clearAll() {\n    localStorage.clear();\n  },\n  \n};\n\n/* harmony default export */ const src_Storage = (Storage);\n\n;// ./node_modules/date-fns/locale/en-US/_lib/formatDistance.js\nconst formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: "less than a second",\n    other: "less than {{count}} seconds",\n  },\n\n  xSeconds: {\n    one: "1 second",\n    other: "{{count}} seconds",\n  },\n\n  halfAMinute: "half a minute",\n\n  lessThanXMinutes: {\n    one: "less than a minute",\n    other: "less than {{count}} minutes",\n  },\n\n  xMinutes: {\n    one: "1 minute",\n    other: "{{count}} minutes",\n  },\n\n  aboutXHours: {\n    one: "about 1 hour",\n    other: "about {{count}} hours",\n  },\n\n  xHours: {\n    one: "1 hour",\n    other: "{{count}} hours",\n  },\n\n  xDays: {\n    one: "1 day",\n    other: "{{count}} days",\n  },\n\n  aboutXWeeks: {\n    one: "about 1 week",\n    other: "about {{count}} weeks",\n  },\n\n  xWeeks: {\n    one: "1 week",\n    other: "{{count}} weeks",\n  },\n\n  aboutXMonths: {\n    one: "about 1 month",\n    other: "about {{count}} months",\n  },\n\n  xMonths: {\n    one: "1 month",\n    other: "{{count}} months",\n  },\n\n  aboutXYears: {\n    one: "about 1 year",\n    other: "about {{count}} years",\n  },\n\n  xYears: {\n    one: "1 year",\n    other: "{{count}} years",\n  },\n\n  overXYears: {\n    one: "over 1 year",\n    other: "over {{count}} years",\n  },\n\n  almostXYears: {\n    one: "almost 1 year",\n    other: "almost {{count}} years",\n  },\n};\n\nconst formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === "string") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace("{{count}}", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return "in " + result;\n    } else {\n      return result + " ago";\n    }\n  }\n\n  return result;\n};\n\n;// ./node_modules/date-fns/locale/_lib/buildFormatLongFn.js\nfunction buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n\n;// ./node_modules/date-fns/locale/en-US/_lib/formatLong.js\n\n\nconst dateFormats = {\n  full: "EEEE, MMMM do, y",\n  long: "MMMM do, y",\n  medium: "MMM d, y",\n  short: "MM/dd/yyyy",\n};\n\nconst timeFormats = {\n  full: "h:mm:ss a zzzz",\n  long: "h:mm:ss a z",\n  medium: "h:mm:ss a",\n  short: "h:mm a",\n};\n\nconst dateTimeFormats = {\n  full: "{{date}} \'at\' {{time}}",\n  long: "{{date}} \'at\' {{time}}",\n  medium: "{{date}}, {{time}}",\n  short: "{{date}}, {{time}}",\n};\n\nconst formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: "full",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: "full",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: "full",\n  }),\n};\n\n;// ./node_modules/date-fns/locale/en-US/_lib/formatRelative.js\nconst formatRelativeLocale = {\n  lastWeek: "\'last\' eeee \'at\' p",\n  yesterday: "\'yesterday at\' p",\n  today: "\'today at\' p",\n  tomorrow: "\'tomorrow at\' p",\n  nextWeek: "eeee \'at\' p",\n  other: "P",\n};\n\nconst formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n\n;// ./node_modules/date-fns/locale/_lib/buildLocalizeFn.js\n/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don\'t start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nfunction buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : "standalone";\n\n    let valuesArray;\n    if (context === "formatting" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don\'t want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n\n;// ./node_modules/date-fns/locale/en-US/_lib/localize.js\n\n\nconst eraValues = {\n  narrow: ["B", "A"],\n  abbreviated: ["BC", "AD"],\n  wide: ["Before Christ", "Anno Domini"],\n};\n\nconst quarterValues = {\n  narrow: ["1", "2", "3", "4"],\n  abbreviated: ["Q1", "Q2", "Q3", "Q4"],\n  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you\'re working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],\n  abbreviated: [\n    "Jan",\n    "Feb",\n    "Mar",\n    "Apr",\n    "May",\n    "Jun",\n    "Jul",\n    "Aug",\n    "Sep",\n    "Oct",\n    "Nov",\n    "Dec",\n  ],\n\n  wide: [\n    "January",\n    "February",\n    "March",\n    "April",\n    "May",\n    "June",\n    "July",\n    "August",\n    "September",\n    "October",\n    "November",\n    "December",\n  ],\n};\n\nconst dayValues = {\n  narrow: ["S", "M", "T", "W", "T", "F", "S"],\n  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],\n  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],\n  wide: [\n    "Sunday",\n    "Monday",\n    "Tuesday",\n    "Wednesday",\n    "Thursday",\n    "Friday",\n    "Saturday",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: "a",\n    pm: "p",\n    midnight: "mi",\n    noon: "n",\n    morning: "morning",\n    afternoon: "afternoon",\n    evening: "evening",\n    night: "night",\n  },\n  abbreviated: {\n    am: "AM",\n    pm: "PM",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "morning",\n    afternoon: "afternoon",\n    evening: "evening",\n    night: "night",\n  },\n  wide: {\n    am: "a.m.",\n    pm: "p.m.",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "morning",\n    afternoon: "afternoon",\n    evening: "evening",\n    night: "night",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: "a",\n    pm: "p",\n    midnight: "mi",\n    noon: "n",\n    morning: "in the morning",\n    afternoon: "in the afternoon",\n    evening: "in the evening",\n    night: "at night",\n  },\n  abbreviated: {\n    am: "AM",\n    pm: "PM",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "in the morning",\n    afternoon: "in the afternoon",\n    evening: "in the evening",\n    night: "at night",\n  },\n  wide: {\n    am: "a.m.",\n    pm: "p.m.",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "in the morning",\n    afternoon: "in the afternoon",\n    evening: "in the evening",\n    night: "at night",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be \'year\', \'quarter\', \'month\', \'week\', \'date\', \'dayOfYear\',\n  // \'day\', \'hour\', \'minute\', \'second\'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + "st";\n      case 2:\n        return number + "nd";\n      case 3:\n        return number + "rd";\n    }\n  }\n  return number + "th";\n};\n\nconst localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: "wide",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: "wide",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: "wide",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: "wide",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: "wide",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: "wide",\n  }),\n};\n\n;// ./node_modules/date-fns/locale/_lib/buildMatchFn.js\nfunction buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // [TODO] -- I challenge you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // [TODO] -- I challenge you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\n;// ./node_modules/date-fns/locale/_lib/buildMatchPatternFn.js\nfunction buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // [TODO] I challenge you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\n;// ./node_modules/date-fns/locale/en-US/_lib/match.js\n\n\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nconst match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: "wide",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: "any",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: "wide",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: "any",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: "wide",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: "any",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: "wide",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: "any",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: "any",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: "any",\n  }),\n};\n\n;// ./node_modules/date-fns/locale/en-US.js\n\n\n\n\n\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nconst enUS = {\n  code: "en-US",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\n/* harmony default export */ const en_US = ((/* unused pure expression or super */ null && (enUS)));\n\n;// ./node_modules/date-fns/_lib/defaultOptions.js\nlet defaultOptions = {};\n\nfunction getDefaultOptions() {\n  return defaultOptions;\n}\n\nfunction setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n\n;// ./node_modules/date-fns/constants.js\n/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from "./constants/date-fns/constants";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nconst daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nconst daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from "./constants/date-fns/constants";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nconst maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from "./constants/date-fns/constants";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nconst minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nconst millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nconst millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nconst millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nconst millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nconst millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nconst minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nconst minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nconst minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nconst minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nconst monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nconst monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nconst quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nconst secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nconst secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nconst secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nconst secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nconst secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nconst secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nconst secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It\'s useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nconst constructFromSymbol = Symbol.for("constructDateFrom");\n\n;// ./node_modules/date-fns/constructFrom.js\n\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for("constructDateFrom")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It\'s useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from "./constructFrom/date-fns";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nfunction constructFrom(date, value) {\n  if (typeof date === "function") return date(value);\n\n  if (date && typeof date === "object" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_constructFrom = ((/* unused pure expression or super */ null && (constructFrom)));\n\n;// ./node_modules/date-fns/toDate.js\n\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for("constructDateFrom")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It\'s useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nfunction toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_toDate = ((/* unused pure expression or super */ null && (toDate)));\n\n;// ./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js\n\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for \'Europe/Prague\' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nfunction getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n\n;// ./node_modules/date-fns/_lib/normalizeDates.js\n\n\nfunction normalizeDates(context, ...dates) {\n  const normalize = constructFrom.bind(\n    null,\n    context || dates.find((date) => typeof date === "object"),\n  );\n  return dates.map(normalize);\n}\n\n;// ./node_modules/date-fns/startOfDay.js\n\n\n/**\n * The {@link startOfDay} function options.\n */\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nfunction startOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfDay = ((/* unused pure expression or super */ null && (startOfDay)));\n\n;// ./node_modules/date-fns/differenceInCalendarDays.js\n\n\n\n\n\n/**\n * The {@link differenceInCalendarDays} function options.\n */\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - The options object\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nfunction differenceInCalendarDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const laterStartOfDay = startOfDay(laterDate_);\n  const earlierStartOfDay = startOfDay(earlierDate_);\n\n  const laterTimestamp =\n    +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);\n  const earlierTimestamp =\n    +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it\'s different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_differenceInCalendarDays = ((/* unused pure expression or super */ null && (differenceInCalendarDays)));\n\n;// ./node_modules/date-fns/startOfYear.js\n\n\n/**\n * The {@link startOfYear} function options.\n */\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nfunction startOfYear(date, options) {\n  const date_ = toDate(date, options?.in);\n  date_.setFullYear(date_.getFullYear(), 0, 1);\n  date_.setHours(0, 0, 0, 0);\n  return date_;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfYear = ((/* unused pure expression or super */ null && (startOfYear)));\n\n;// ./node_modules/date-fns/getDayOfYear.js\n\n\n\n\n/**\n * The {@link getDayOfYear} function options.\n */\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nfunction getDayOfYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getDayOfYear = ((/* unused pure expression or super */ null && (getDayOfYear)));\n\n;// ./node_modules/date-fns/startOfWeek.js\n\n\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nfunction startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date, options?.in);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfWeek = ((/* unused pure expression or super */ null && (startOfWeek)));\n\n;// ./node_modules/date-fns/startOfISOWeek.js\n\n\n/**\n * The {@link startOfISOWeek} function options.\n */\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nfunction startOfISOWeek(date, options) {\n  return startOfWeek(date, { ...options, weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfISOWeek = ((/* unused pure expression or super */ null && (startOfISOWeek)));\n\n;// ./node_modules/date-fns/getISOWeekYear.js\n\n\n\n\n/**\n * The {@link getISOWeekYear} function options.\n */\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year\'s first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nfunction getISOWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getISOWeekYear = ((/* unused pure expression or super */ null && (getISOWeekYear)));\n\n;// ./node_modules/date-fns/startOfISOWeekYear.js\n\n\n\n\n/**\n * The {@link startOfISOWeekYear} function options.\n */\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year\'s first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nfunction startOfISOWeekYear(date, options) {\n  const year = getISOWeekYear(date, options);\n  const fourthOfJanuary = constructFrom(options?.in || date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfISOWeekYear = ((/* unused pure expression or super */ null && (startOfISOWeekYear)));\n\n;// ./node_modules/date-fns/getISOWeek.js\n\n\n\n\n\n/**\n * The {@link getISOWeek} function options.\n */\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nfunction getISOWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it\'s different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getISOWeek = ((/* unused pure expression or super */ null && (getISOWeek)));\n\n;// ./node_modules/date-fns/getWeekYear.js\n\n\n\n\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nfunction getWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(options?.in || date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(options?.in || date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (+_date >= +startOfNextYear) {\n    return year + 1;\n  } else if (+_date >= +startOfThisYear) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getWeekYear = ((/* unused pure expression or super */ null && (getWeekYear)));\n\n;// ./node_modules/date-fns/startOfWeekYear.js\n\n\n\n\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nfunction startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(options?.in || date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfWeekYear = ((/* unused pure expression or super */ null && (startOfWeekYear)));\n\n;// ./node_modules/date-fns/getWeek.js\n\n\n\n\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\nfunction getWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it\'s different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getWeek = ((/* unused pure expression or super */ null && (getWeek)));\n\n;// ./node_modules/date-fns/_lib/addLeadingZeros.js\nfunction addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? "-" : "";\n  const output = Math.abs(number).toString().padStart(targetLength, "0");\n  return sign + output;\n}\n\n;// ./node_modules/date-fns/_lib/format/lightFormatters.js\n\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nconst lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? "pm" : "am";\n\n    switch (token) {\n      case "a":\n      case "aa":\n        return dayPeriodEnumValue.toUpperCase();\n      case "aaa":\n        return dayPeriodEnumValue;\n      case "aaaaa":\n        return dayPeriodEnumValue[0];\n      case "aaaa":\n      default:\n        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n\n;// ./node_modules/date-fns/_lib/format/formatters.js\n\n\n\n\n\n\n\n\n\nconst dayPeriodEnum = {\n  am: "am",\n  pm: "pm",\n  midnight: "midnight",\n  noon: "noon",\n  morning: "morning",\n  afternoon: "afternoon",\n  evening: "evening",\n  night: "night",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nconst formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case "G":\n      case "GG":\n      case "GGG":\n        return localize.era(era, { width: "abbreviated" });\n      // A, B\n      case "GGGGG":\n        return localize.era(era, { width: "narrow" });\n      // Anno Domini, Before Christ\n      case "GGGG":\n      default:\n        return localize.era(era, { width: "wide" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === "yo") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: "year" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === "YY") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === "Yo") {\n      return localize.ordinalNumber(weekYear, { unit: "year" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case "Q":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case "QQ":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case "Qo":\n        return localize.ordinalNumber(quarter, { unit: "quarter" });\n      // Q1, Q2, Q3, Q4\n      case "QQQ":\n        return localize.quarter(quarter, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case "QQQQQ":\n        return localize.quarter(quarter, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case "QQQQ":\n      default:\n        return localize.quarter(quarter, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case "q":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case "qq":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case "qo":\n        return localize.ordinalNumber(quarter, { unit: "quarter" });\n      // Q1, Q2, Q3, Q4\n      case "qqq":\n        return localize.quarter(quarter, {\n          width: "abbreviated",\n          context: "standalone",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case "qqqqq":\n        return localize.quarter(quarter, {\n          width: "narrow",\n          context: "standalone",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case "qqqq":\n      default:\n        return localize.quarter(quarter, {\n          width: "wide",\n          context: "standalone",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case "M":\n      case "MM":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case "Mo":\n        return localize.ordinalNumber(month + 1, { unit: "month" });\n      // Jan, Feb, ..., Dec\n      case "MMM":\n        return localize.month(month, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      // J, F, ..., D\n      case "MMMMM":\n        return localize.month(month, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // January, February, ..., December\n      case "MMMM":\n      default:\n        return localize.month(month, { width: "wide", context: "formatting" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case "L":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case "LL":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case "Lo":\n        return localize.ordinalNumber(month + 1, { unit: "month" });\n      // Jan, Feb, ..., Dec\n      case "LLL":\n        return localize.month(month, {\n          width: "abbreviated",\n          context: "standalone",\n        });\n      // J, F, ..., D\n      case "LLLLL":\n        return localize.month(month, {\n          width: "narrow",\n          context: "standalone",\n        });\n      // January, February, ..., December\n      case "LLLL":\n      default:\n        return localize.month(month, { width: "wide", context: "standalone" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === "wo") {\n      return localize.ordinalNumber(week, { unit: "week" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === "Io") {\n      return localize.ordinalNumber(isoWeek, { unit: "week" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === "do") {\n      return localize.ordinalNumber(date.getDate(), { unit: "date" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === "Do") {\n      return localize.ordinalNumber(dayOfYear, { unit: "dayOfYear" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case "E":\n      case "EE":\n      case "EEE":\n        return localize.day(dayOfWeek, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      // T\n      case "EEEEE":\n        return localize.day(dayOfWeek, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // Tu\n      case "EEEEEE":\n        return localize.day(dayOfWeek, {\n          width: "short",\n          context: "formatting",\n        });\n      // Tuesday\n      case "EEEE":\n      default:\n        return localize.day(dayOfWeek, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case "e":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case "ee":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case "eo":\n        return localize.ordinalNumber(localDayOfWeek, { unit: "day" });\n      case "eee":\n        return localize.day(dayOfWeek, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      // T\n      case "eeeee":\n        return localize.day(dayOfWeek, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // Tu\n      case "eeeeee":\n        return localize.day(dayOfWeek, {\n          width: "short",\n          context: "formatting",\n        });\n      // Tuesday\n      case "eeee":\n      default:\n        return localize.day(dayOfWeek, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case "c":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case "cc":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case "co":\n        return localize.ordinalNumber(localDayOfWeek, { unit: "day" });\n      case "ccc":\n        return localize.day(dayOfWeek, {\n          width: "abbreviated",\n          context: "standalone",\n        });\n      // T\n      case "ccccc":\n        return localize.day(dayOfWeek, {\n          width: "narrow",\n          context: "standalone",\n        });\n      // Tu\n      case "cccccc":\n        return localize.day(dayOfWeek, {\n          width: "short",\n          context: "standalone",\n        });\n      // Tuesday\n      case "cccc":\n      default:\n        return localize.day(dayOfWeek, {\n          width: "wide",\n          context: "standalone",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case "i":\n        return String(isoDayOfWeek);\n      // 02\n      case "ii":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case "io":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: "day" });\n      // Tue\n      case "iii":\n        return localize.day(dayOfWeek, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      // T\n      case "iiiii":\n        return localize.day(dayOfWeek, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // Tu\n      case "iiiiii":\n        return localize.day(dayOfWeek, {\n          width: "short",\n          context: "formatting",\n        });\n      // Tuesday\n      case "iiii":\n      default:\n        return localize.day(dayOfWeek, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";\n\n    switch (token) {\n      case "a":\n      case "aa":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      case "aaa":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: "abbreviated",\n            context: "formatting",\n          })\n          .toLowerCase();\n      case "aaaaa":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "narrow",\n          context: "formatting",\n        });\n      case "aaaa":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";\n    }\n\n    switch (token) {\n      case "b":\n      case "bb":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      case "bbb":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: "abbreviated",\n            context: "formatting",\n          })\n          .toLowerCase();\n      case "bbbbb":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "narrow",\n          context: "formatting",\n        });\n      case "bbbb":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case "B":\n      case "BB":\n      case "BBB":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      case "BBBBB":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "narrow",\n          context: "formatting",\n        });\n      case "BBBB":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === "ho") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: "hour" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === "Ho") {\n      return localize.ordinalNumber(date.getHours(), { unit: "hour" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === "Ko") {\n      return localize.ordinalNumber(hours, { unit: "hour" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === "ko") {\n      return localize.ordinalNumber(hours, { unit: "hour" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === "mo") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: "minute" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === "so") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: "second" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `\'Z\'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return "Z";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case "X":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case "XXXX":\n      case "XX": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case "XXXXX":\n      case "XXX": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, ":");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `\'+00:00\'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case "x":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case "xxxx":\n      case "xx": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case "xxxxx":\n      case "xxx": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, ":");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case "O":\n      case "OO":\n      case "OOO":\n        return "GMT" + formatTimezoneShort(timezoneOffset, ":");\n      // Long\n      case "OOOO":\n      default:\n        return "GMT" + formatTimezone(timezoneOffset, ":");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case "z":\n      case "zz":\n      case "zzz":\n        return "GMT" + formatTimezoneShort(timezoneOffset, ":");\n      // Long\n      case "zzzz":\n      default:\n        return "GMT" + formatTimezone(timezoneOffset, ":");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(+date / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    return addLeadingZeros(+date, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = "") {\n  const sign = offset > 0 ? "-" : "+";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? "-" : "+";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = "") {\n  const sign = offset > 0 ? "-" : "+";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\n;// ./node_modules/date-fns/_lib/format/longFormatters.js\nconst dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case "P":\n      return formatLong.date({ width: "short" });\n    case "PP":\n      return formatLong.date({ width: "medium" });\n    case "PPP":\n      return formatLong.date({ width: "long" });\n    case "PPPP":\n    default:\n      return formatLong.date({ width: "full" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case "p":\n      return formatLong.time({ width: "short" });\n    case "pp":\n      return formatLong.time({ width: "medium" });\n    case "ppp":\n      return formatLong.time({ width: "long" });\n    case "pppp":\n    default:\n      return formatLong.time({ width: "full" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case "P":\n      dateTimeFormat = formatLong.dateTime({ width: "short" });\n      break;\n    case "PP":\n      dateTimeFormat = formatLong.dateTime({ width: "medium" });\n      break;\n    case "PPP":\n      dateTimeFormat = formatLong.dateTime({ width: "long" });\n      break;\n    case "PPPP":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: "full" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace("{{date}}", dateLongFormatter(datePattern, formatLong))\n    .replace("{{time}}", timeLongFormatter(timePattern, formatLong));\n};\n\nconst longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n\n;// ./node_modules/date-fns/_lib/protectedTokens.js\nconst dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = ["D", "DD", "YY", "YYYY"];\n\nfunction isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nfunction isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nfunction warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === "Y" ? "years" : "days of the month";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n\n;// ./node_modules/date-fns/isDate.js\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate(\'2014-02-31\')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nfunction isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === "object" &&\n      Object.prototype.toString.call(value) === "[object Date]")\n  );\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_isDate = ((/* unused pure expression or super */ null && (isDate)));\n\n;// ./node_modules/date-fns/isValid.js\n\n\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertible into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(\'\'))\n * //=> false\n */\nfunction isValid(date) {\n  return !((!isDate(date) && typeof date !== "number") || isNaN(+toDate(date)));\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_isValid = ((/* unused pure expression or super */ null && (isValid)));\n\n;// ./node_modules/date-fns/format.js\n\n\n\n\n\n\n\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\n\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - \'\' matches two quote characters in a row\n// - \'(\'\'|[^\'])+(\'|$) matches anything surrounded by two quote characters (\'),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|\'\'|\'(\'\'|[^\'])+(\'|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|\'\'|\'(\'\'|[^\'])+(\'|$)|./g;\n\nconst escapedStringRegExp = /^\'([^]*?)\'?$/;\nconst doubleQuoteRegExp = /\'\'/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (\') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a \'real\' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as "stand-alone" units, but are different in some languages.\n *    "Formatting" units are declined according to the rules of the language\n *    in the context of a date. "Stand-alone" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), \'do LLLL\', {locale: cs}) //=> \'6. listopad\'`\n *\n *    `format(new Date(2017, 10, 6), \'do MMMM\', {locale: cs}) //=> \'6. listopadu\'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with "2" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), \'MMM\') //=> \'Nov\'`\n *\n *    `format(new Date(2017, 10, 6), \'MMMM\') //=> \'November\'`\n *\n *    `format(new Date(2017, 10, 6), \'MMMMM\') //=> \'N\'`\n *\n *    `format(new Date(2017, 10, 6), \'MMMMMM\') //=> \'November\'`\n *\n *    `format(new Date(2017, 10, 6), \'MMMMMMM\') //=> \'November\'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), \'yyyyyyyy\') //=> \'00002017\'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), \'MM/dd/yyyy\')\n * //=> \'02/11/2014\'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from \'date-fns/locale/eo\'\n * const result = format(new Date(2014, 6, 2), "do \'de\' MMMM yyyy", {\n *   locale: eoLocale\n * })\n * //=> \'2-a de julio 2014\'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), "h \'o\'\'clock\'")\n * //=> "3 o\'clock"\n */\nfunction format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? enUS;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date, options?.in);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError("Invalid time value");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === "p" || firstCharacter === "P") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join("")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === "\'\'") {\n        return { isToken: false, value: "\'" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === "\'") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          "Format string contains an unescaped latin alphabet character `" +\n            firstCharacter +\n            "`",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join("");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, "\'");\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_format = ((/* unused pure expression or super */ null && (format)));\n\n;// ./src/MainDisplay.js\n/**\n * Generates and returns HTML strings based on the specified display type.\n *\n * @param {"todaysTasks" | "upcomingTasks" | "pastTasksProjects" | "noTodays" | "noUpcoming" | "noPastTasksProjects" | "searchTasksProjects"} displayType - The type of display to generate. \n * Possible values:\n * - "todaysTasks": Displays today\'s tasks with today\'s date.\n * - "upcomingTasks": Displays upcoming tasks with today\'s date.\n * - "pastTasksProjects": Displays past tasks/projects with today\'s date.\n * - "noTodays": Displays a message indicating no tasks found/due for today.\n * - "noUpcoming": Displays a message indicating no upcoming tasks in the future.\n * \n * @returns {string} - The generated HTML string for the specified display type.\n**/\n\n\n\nfunction getMainDisplayAs(displayType) {\n  // upcomingTasks, todaysTasks, pastTasksProjects\n  // also handle if user has NO tasks/project\n\n  let dateToday = format(new Date(), "MM-dd-yyyy");\n\n  if (displayType==="todaysTasks") {\n    const str = `\n    <div class="main-title-date-wrapper">\n      <h1 class="main-title">Today\'s Tasks</h1>\n      <h2 class="main-date">${dateToday}</h2>\n    </div>\n\n    <div class="card-container-wrapper">\n      \x3c!-- load stuff here --\x3e\n      <div class="card-container"></div>\n    </div>\n    `;\n    return str;\n  }\n  if (displayType==="upcomingTasks") {\n    const str = `\n      <div class="main-title-date-wrapper">\n      <h1 class="main-title">Upcoming Tasks</h1>\n      <h2 class="main-date">${dateToday}</h2>\n    </div>\n\n    <div class="card-container-wrapper">\n      \x3c!-- load stuff here --\x3e\n      <div class="card-container"></div>\n    </div>\n    `;\n    return str;\n  }\n  if (displayType==="pastTasksProjects") {\n    const str = `\n      <div class="main-title-date-wrapper">\n      <h1 class="main-title">Past Tasks/Projects</h1>\n      <h2 class="main-date">${dateToday}</h2>\n    </div>\n\n    <div class="card-container-wrapper">\n      \x3c!-- load stuff here --\x3e\n      <div class="card-container"></div>\n    </div>\n    `;\n    return str;\n  }\n  if (displayType==="noTodays") {\n    const str = `\n    <div class="main-title-date-wrapper">\n      <h1 class="main-title">Today\'s Tasks</h1>\n      <h2 class="main-date">${dateToday}</h2>\n    </div>\n\n    <div class="card-container-wrapper">\n      \x3c!-- load stuff here --\x3e\n      <div class="card-container">\n        <div class="message-wrapper">\n          <div class="message">\n            No tasks found/due for today.\n          </div>\n        </div>\n      </div>\n    </div>\n    `\n    return str;\n  }\n  if (displayType==="noUpcoming") {\n    const str = `\n      <div class="main-title-date-wrapper">\n      <h1 class="main-title">Upcoming Tasks</h1>\n      <h2 class="main-date">${dateToday}</h2>\n    </div>\n\n    <div class="card-container-wrapper">\n      \x3c!-- load stuff here --\x3e\n      <div class="card-container">\n        <div class="message-wrapper">\n          <div class="message">\n            No upcoming tasks found/due in future.\n          </div>\n        </div>\n      </div>\n    </div>\n    `;\n    return str;\n  }\n  if (displayType === "noPastTasksProjects") {\n    const str = `\n      <div class="main-title-date-wrapper">\n      <h1 class="main-title">Past Tasks/Projects</h1>\n      <h2 class="main-date">${dateToday}</h2>\n    </div>\n\n    <div class="card-container-wrapper">\n      \x3c!-- load stuff here --\x3e\n      <div class="card-container">\n        <div class="message-wrapper">\n          <div class="message">\n            No past tasks/projects found.\n          </div>\n        </div>\n      </div>\n    </div>\n    `;\n    return str;\n  }\n  if (displayType === "searchTasksProjects") {\n    const str = `\n    <div class="main-title-date-wrapper">\n      <h1 class="main-title">Search Tasks/Projects</h1>\n      <h2 class="main-date">${dateToday}</h2>\n    </div>\n\n    <div class="card-container-wrapper">\n      \x3c!-- load stuff here --\x3e\n      <div class="card-container"></div>\n    </div>\n    `;\n    return str;\n  }\n  if (displayType === "noSearchResults") {\n    const str = `\n    <div class="main-title-date-wrapper">\n      <h1 class="main-title">Search Tasks/Projects</h1>\n      <h2 class="main-date">${dateToday}</h2>\n    </div>\n\n    <div class="card-container-wrapper">\n      \x3c!-- load stuff here --\x3e\n      <div class="card-container">\n        <div class="message-wrapper">\n          <div class="message">No Results Found.</div>\n        </div>\n      </div>\n    </div>\n    `;\n    return str;\n  }\n};\n;// ./src/Editor.js\n/**\n * Returns the editor template based on the editor type.\n * @param {\'default\' | \'addNewTask\' | \'viewEditTask\' | \'addNewProject\' | \'viewEditProject\' | \'successfulUpdate\' | \'successfulAdd\'} editorType - Type of editor to retrieve.\n * @returns {string} The innerHTML for the editor.\n */\n\nfunction getEditorAs(editorType) {\n  \n  if (!editorType || typeof editorType!="string") {\n    throw new Error("Please provide a valid Editor type");\n  };\n\n  if (editorType==="default") {\n    const defaultView = `\n      <div class="message-wrapper">\n        <div class="message">Click a task/project to view or edit it</div>\n      </div>\n    `\n    return defaultView;\n  };\n\n  if (editorType==="successfulUpdate") {\n    const defaultView = `\n      <div class="message-wrapper">\n        <div class="message successful-update">Task/Project successfully updated!</div>\n      </div>\n    `\n    return defaultView;\n  };\n\n  if (editorType==="successfulAdd") {\n    const defaultView = `\n      <div class="message-wrapper">\n        <div class="message successful-add">Task/Project successfully added!</div>\n      </div>\n    `\n    return defaultView;\n  };\n\n  if (editorType==="addNewTask") {\n    const addNewTask = `\n      <h1 class="editor-title">Add New Task</h1>\n      <form>\n        <div>\n          <label for="task-title">\n            Title\n            <span aria-label="Required"><strong>*</strong></span>\n            <span class="error-msg hidden task-error-msg" aria-hidden="true">Task with same name already exists!</span>\n          </label>\n          <input type="text" id="task-title" name="title" placeholder="My Task" aria-placeholder="My Task"\n          required minlength="3" maxlength="35" >\n        </div>\n\n        <div>\n          <p class="input-label">\n            Completed?\n            <span aria-label="Required"><strong>*</strong></span>\n          </p>\n          <div class="radio-buttons-wrapper task-complete-radio-buttons">\n            <div>\n              <input type="radio" id="task-is-complete" name="isComplete" value="true" required>\n              <label for="task-is-complete" class="yes">Yes</label>\n            </div>\n            <div>\n              <input type="radio" id="task-is-not-complete" name="isComplete" value="false" required checked>\n              <label for="task-is-not-complete" class="no">No</label>\n            </div>\n          </div>\n        </div>\n\n        <div>\n          <label for="task-desc">\n            Description\n          </label>\n          <textarea id="task-desc" placeholder="What\'s this for?" aria-placeholder="What\'s this for?"\n          name="description" maxlength="350"></textarea>\n        </div>\n\n        <div>\n          <label for="task-due-date">\n            Due date\n          </label>\n          <input type="date" id="task-due-date" name="dueDate">\n        </div>\n\n        <div id="priority-radio-buttons">\n          <p class="input-label">\n            Priority\n            <span aria-label="Required"><strong>*</strong></span>\n          </p>\n\n          <div class="priority-radio-buttons-wrapper">\n          <div>\n            <input type="radio" id="task-priority-low" name="priority" value="Low" required>\n            <label for="task-priority-low" class="low">Low</label>\n          </div>\n          <div>\n            <input type="radio" id="task-priority-medium" name="priority" value="Medium">\n            <label for="task-priority-medium" class="medium">Medium</label>\n          </div>\n          <div>\n            <input type="radio" id="task-priority-high" name="priority" value="High">\n            <label for="task-priority-high" class="high">High</label>\n          </div>\n          <div>\n            <input type="radio" id="task-priority-critical" name="priority" value="Critical">\n            <label for="task-priority-critical" class="critical">Critical</label>\n          </div>\n        </div>\n        </div>\n\n        <div>\n          <label for="task-subtasks">Subtasks</label>\n          <textarea id="task-subtasks" name="checkList" aria-placeholder="Additional Subtasks"\n          placeholder="Additional Subtasks. Enter as a comma seperated list (case sensitive)." maxlength="500"></textarea>\n        </div>\n\n        <div>\n          <label for="task-link-to-project">Link to a Project</label>\n          <input type="text" id="task-link-to-project" name="projectTitle" placeholder="Project\'s Title"\n          aria-placeholder="Project Title">\n          <span class="error-msg hidden project-error-msg" aria-hidden="true">Project "name" does not exist!</span>\n        </div>\n\n        <div class="button-wrapper">\n          <button type="button" class="submit-button form-button">\n            Done\n          </button>\n          <button type="button" class="delete-button form-button hidden">\n            Delete\n          </button>\n          <button type="button" class="cancel-button form-button">\n            Cancel\n          </button>\n        </div>\n      </form>\n    `\n    return addNewTask;\n  };\n\n  if (editorType==="viewEditTask") {\n    const viewEditTask = `\n      <h1 class="editor-title">View/Edit Task</h1>\n      <form>\n        <div>\n          <label for="task-title">\n            Title\n            <span aria-label="Required"><strong>*</strong></span>\n            <span class="error-msg hidden task-error-msg" aria-hidden="true">Task Already Exists!</span>\n          </label>\n          <input type="text" id="task-title" name="title" placeholder="My Task" aria-placeholder="My Task"\n          required minlength="3" maxlength="35">\n        </div>\n\n        <div>\n          <p class="input-label">\n            Completed?\n            <span aria-label="Required"><strong>*</strong></span>\n          </p>\n          <div class="radio-buttons-wrapper task-complete-radio-buttons">\n            <div>\n              <input type="radio" id="task-is-complete" name="isComplete" value="true" required>\n              <label for="task-is-complete" class="yes">Yes</label>\n            </div>\n            <div>\n              <input type="radio" id="task-is-not-complete" name="isComplete" value="false" required>\n              <label for="task-is-not-complete" class="no">No</label>\n            </div>\n          </div>\n        </div>\n\n        <div>\n          <label for="task-desc">\n            Description\n          </label>\n          <textarea id="task-desc" placeholder="What\'s this for?" aria-placeholder="What\'s this for?"\n          name="description" maxlength="350"></textarea>\n        </div>\n\n        <div>\n          <label for="task-due-date">\n            Due date\n          </label>\n          <input type="date" id="task-due-date" name="dueDate">\n        </div>\n\n        <div id="priority-radio-buttons">\n          <p class="input-label">\n            Priority\n            <span aria-label="Required"><strong>*</strong></span>\n          </p>\n\n          <div class="priority-radio-buttons-wrapper">\n          <div>\n            <input type="radio" id="task-priority-low" name="priority" value="Low" required>\n            <label for="task-priority-low" class="low">Low</label>\n          </div>\n          <div>\n            <input type="radio" id="task-priority-medium" name="priority" value="Medium">\n            <label for="task-priority-medium" class="medium">Medium</label>\n          </div>\n          <div>\n            <input type="radio" id="task-priority-high" name="priority" value="High">\n            <label for="task-priority-high" class="high">High</label>\n          </div>\n          <div>\n            <input type="radio" id="task-priority-critical" name="priority" value="Critical">\n            <label for="task-priority-critical" class="critical">Critical</label>\n          </div>\n        </div>\n        </div>\n\n        <div id="subtasks">\n          <p class="input-label">\n            Subtasks\n          </p>\n          \n          <div class="subtasks-wrapper">\n\n          </div>\n          <div class="message-small">A checked task means complete.</div>\n        </div>\n\n        <div>\n          <label for="task-link-to-project">Link to a Project &nbsp&nbsp<span class="error-msg hidden project-error-msg" aria-hidden="true"></span></label>\n          <input type="text" id="task-link-to-project" name="projectTitle" placeholder="Project\'s Title"\n            aria-placeholder="Project Title">\n        </div>\n\n        <div class="button-wrapper">\n          <button type="button" class="submit-button form-button">\n            Done\n          </button>\n          <button type="button" class="delete-button form-button">\n            Delete\n          </button>\n          <button type="button" class="cancel-button form-button hidden">\n            Cancel\n          </button>\n        </div>\n      </form>\n    `;\n    return viewEditTask;\n  }\n\n  if (editorType==="addNewProject") {\n    const addNewProject = `\n      <h1 class="editor-title">Add New Project</h1>\n      <form >\n        <div>\n          <label for="task-title">\n            Project Title\n            <span aria-label="Required"><strong>*</strong></span>\n            <span class="error-msg hidden project-error-msg" aria-hidden="true">Task Already Exists!</span>\n          </label>\n          <input type="text" id="task-title" name="title" placeholder="My Project" aria-placeholder="My Project" required minlength="3" maxlength="35">\n        </div>\n\n          <div>\n            <p class="input-label">\n              Completed?\n              <span aria-label="Required"><strong>*</strong></span>\n            </p>\n            <div class="radio-buttons-wrapper task-complete-radio-buttons">\n              <div>\n                <input type="radio" id="task-is-complete" name="isComplete" value="true" required>\n                <label for="task-is-complete" class="yes">Yes</label>\n              </div>\n              <div>\n                <input type="radio" id="task-is-not-complete" name="isComplete" value="false" required checked>\n                <label for="task-is-not-complete" class="no">No</label>\n              </div>\n            </div>\n          </div>\n\n        <div>\n          <label for="task-desc">\n            Project Description\n          </label>\n          <textarea id="task-desc" placeholder="What\'s this for?" aria-placeholder="What\'s this for?"\n            name="description" maxlength="350" ></textarea>\n        </div>\n\n        <div>\n          <label for="task-due-date">\n            Due date\n          </label>\n          <input type="date" id="task-due-date" name="dueDate">\n        </div>\n\n        <div id="priority-radio-buttons">\n          <p class="input-label">\n            Priority\n            <span aria-label="Required"><strong>*</strong></span>\n          </p>\n\n          <div class="priority-radio-buttons-wrapper">\n            <div>\n              <input type="radio" id="task-priority-low" name="priority" value="Low" required>\n              <label for="task-priority-low" class="low">Low</label>\n            </div>\n            <div>\n              <input type="radio" id="task-priority-medium" name="priority" value="Medium">\n              <label for="task-priority-medium" class="medium">Medium</label>\n            </div>\n            <div>\n              <input type="radio" id="task-priority-high" name="priority" value="High">\n              <label for="task-priority-high" class="high">High</label>\n            </div>\n            <div>\n              <input type="radio" id="task-priority-critical" name="priority" value="Critical">\n              <label for="task-priority-critical" class="critical">Critical</label>\n            </div>\n          </div>\n        </div>\n\n        <div>\n          <label for="task-subtasks">Subtasks</label>\n          <textarea id="task-subtasks" name="checkList" aria-placeholder="Additional Subtasks"\n            placeholder="Additional Subtasks. Enter as a comma seperated list (case sensitive)."\n            maxlength="500"></textarea>\n        </div>\n\n        <div class="button-wrapper">\n          <button type="button" class="submit-button form-button">\n            Done\n          </button>\n          <button type="button" class="delete-button form-button hidden">\n            Delete\n          </button>\n          <button type="button" class="cancel-button form-button">\n            Cancel\n          </button>\n        </div>\n      </form>\n    `;\n    return addNewProject;\n  }\n\n  if (editorType==="viewEditProject") {\n    const viewEditProject = `\n      <h1 class="editor-title">View/Edit Project</h1>\n      <form >\n        <div>\n          <label for="task-title">\n            Project Title\n            <span aria-label="Required"><strong>*</strong></span>\n            <span class="error-msg hidden project-error-msg" aria-hidden="true">Task Already Exists!</span>\n          </label>\n          <input type="text" id="task-title" name="title" placeholder="My Project" aria-placeholder="My Project"\n          required minlength="3" maxlength="35">\n        </div>\n\n        <div>\n          <p class="input-label">\n            Completed?\n            <span aria-label="Required"><strong>*</strong></span>\n          </p>\n          <div class="radio-buttons-wrapper task-complete-radio-buttons">\n            <div>\n              <input type="radio" id="task-is-complete" name="isComplete" value="true" required>\n              <label for="task-is-complete" class="yes">Yes</label>\n            </div>\n            <div>\n              <input type="radio" id="task-is-not-complete" name="isComplete" value="false" required>\n              <label for="task-is-not-complete" class="no">No</label>\n            </div>\n          </div>\n        </div>\n\n        <div>\n          <label for="task-desc">\n            Project Description\n          </label>\n          <textarea id="task-desc" placeholder="What\'s this for?" aria-placeholder="What\'s this for?"\n          name="description" maxlength="350"></textarea>\n        </div>\n\n        <div>\n          <label for="task-due-date">\n            Due date\n          </label>\n          <input type="date" id="task-due-date" name="dueDate">\n        </div>\n\n        <div id="priority-radio-buttons">\n          <p class="input-label">\n            Priority\n            <span aria-label="Required"><strong>*</strong></span>\n          </p>\n\n          <div class="priority-radio-buttons-wrapper">\n            <div>\n              <input type="radio" id="task-priority-low" name="priority" value="Low" required>\n              <label for="task-priority-low" class="low">Low</label>\n            </div>\n            <div>\n              <input type="radio" id="task-priority-medium" name="priority" value="Medium">\n              <label for="task-priority-medium" class="medium">Medium</label>\n            </div>\n            <div>\n              <input type="radio" id="task-priority-high" name="priority" value="High">\n              <label for="task-priority-high" class="high">High</label>\n            </div>\n            <div>\n              <input type="radio" id="task-priority-critical" name="priority" value="Critical">\n              <label for="task-priority-critical" class="critical">Critical</label>\n            </div>\n          </div>\n        </div>\n\n        <div id="subtasks">\n          <p class="input-label">\n            Subtasks\n          </p>\n          \n          <div class="subtasks-wrapper">\n\n          </div>\n          <div class="message-small">A checked task means complete.</div>\n        </div>\n\n        <div class="button-wrapper">\n          <button type="button" class="submit-button form-button">\n            Done\n          </button>\n          <button type="button" class="delete-button form-button">\n            Delete\n          </button>\n          <button type="button" class="cancel-button form-button hidden">\n            Cancel\n          </button>\n        </div>\n      </form>\n    `\n    return viewEditProject;\n  }\n}\n;// ./src/CardMaker.js\n/**\n * Returns the card template based on chosen type and given object.\n * @param {\'cardContainer\' | \'projectContainer\' | \'relatedTasksContainer\'} container \n * @return string - card as a string\n */\n\nfunction makeCardFor(container, object) {\n  //cardContainer, projectContainer, relatedTasksContainer\n  //where container is selected container\n  //where object is the task/project\n\n  if (container==="cardContainer") {\n    const str = `\n    <div class="card">\n      <div class="card-title-wrapper">\n        <div class="card-title">${object.title}</div>\n        <div class="card-info-wrapper">\n          <div class="card-due-date">Due ${object.dueDate}</div>\n          <div class="card-complete-status">\n            ${object.isComplete? "Completed":"Not Complete"}\n          </div>\n          <div class="card-project-link${object.projectTitle? "": " hidden"}">\n            ${object.projectTitle? `From ${object.projectTitle}` : ""}\n          </div>\n          ${\n            object.isProject?\n            `<div class="card-is-project">Project</div>`:\n            ""\n          }\n        </div>\n      </div>\n      <div class="card-priority ${object.priority==="Low"? "low" : ""}${object.priority==="Medium"? "medium" : ""}${object.priority==="High"? "high" : ""}${object.priority==="Critical"? "critical" : ""}">\n        ${object.priority}\n      </div>\n    </div>\n    `\n    return str;\n  }\n  if (container==="projectContainer") {\n    const str = `\n    <div class="project-item">\n      <div>\n        <div class="project-title">${object.title}</div>\n        <div class="project-info-wrapper">\n          <div class="project-due-date">Due ${object.dueDate}</div>\n          <div class="project-is-complete">\n            ${object.isComplete? "Completed":"Not Complete"}\n          </div>\n        </div>\n      </div>\n\n      <div class="project-priority ${object.priority==="Low"? "low" : ""}${object.priority==="Medium"? "medium" : ""}${object.priority==="High"? "high" : ""}${object.priority==="Critical"? "critical" : ""} ">\n        ${object.priority}\n      </div>\n    </div>\n    `\n    return str;\n  }\n\n  if (container==="subtasksWrapper") {\n    //need to have no space in CSS class\n    let tempName = object.name.replace(/[^\\w\\s]|_/g, "").replace(/\\s+/g, "-");\n    const str = `\n    <label for="${tempName}" class="checkbox-item"><input type="checkbox" id="${tempName}" name="${tempName}">${object.name}</label>\n    `\n    return str;\n  }\n};\n;// ./node_modules/date-fns/addDays.js\n\n\n\n/**\n * The {@link addDays} function options.\n */\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nfunction addDays(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n\n  // If 0 days, no-op to avoid changing times in the hour before end of DST\n  if (!amount) return _date;\n\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_addDays = ((/* unused pure expression or super */ null && (addDays)));\n\n;// ./src/ToDoItem.js\n\n\n\nclass toDoItem {\n  constructor(\n    title = "Untitled",\n    description = "No Description",\n    dueDate = format(addDays(new Date(), 5), "MM-dd-yyyy"), //default 7 days\n    priority = "Medium",\n    checkList = [], // {name: , isComplete: ,}\n    isComplete = false,\n    projectTitle = null //not linked to a project\n  ) {\n    this.title = title;\n    this.description = description;\n    this.createDate = format(new Date(), "MM-dd-yyyy");\n    this.dueDate = dueDate;\n    this.priority = priority; //critical, high, medium, low\n    this.checkList = checkList;\n    this.isComplete = isComplete;\n    this.projectTitle = projectTitle;\n  }\n}\n;// ./src/Project.js\n\n\n\n//This stores To Do items\nclass Project {\n  constructor(\n    title = "My Project",\n    description = "No Description",\n    dueDate = format(addDays(new Date(), 14), "MM-dd-yyyy"),\n    priority = "Medium",\n    isComplete = false,\n    taskContainer = [],\n  ) {\n    this.title = title;\n    this.description = description;\n    this.createDate = format(new Date(), "MM-dd-yyyy");\n    this.dueDate = dueDate;\n    this.priority = priority; //critical, high, medium, low\n    this.isComplete = isComplete;\n    this.isProject = true;\n    this.taskContainer = taskContainer; // {name: , isComplete: ,}\n  }\n\n  add(task) {\n    if (this.taskContainer.includes(task)) {\n      throw new Error("Item is already in the container!");\n    }\n    task.projectTitle = this.title;\n    this.taskContainer.push(task);\n  }\n  remove(task) {\n    const index = this.taskContainer.indexOf(task);\n    if (index === -1) {\n      throw new Error("Item not found in the container!");\n    }\n\n    task.projectTitle = null;\n    this.itemContainer.splice(index, 1);\n  }\n}\n\n;// ./src/SubtaskManager.js\n\n\nconst SubtaskManager = {\n  linkTaskToProject(taskObject, projectTitle) {\n    if (\n      projectTitle &&\n      Object.keys(localStorage).includes(projectTitle)\n    ) {\n      const project = src_Storage.getItem(projectTitle);\n      const projectSubtaskNames = project.taskContainer.map(\n        (subtask)=>subtask.name\n      );\n\n      if (!projectSubtaskNames.includes(taskObject.title)) {\n        project.taskContainer.push(\n          {name: taskObject.title, isComplete: taskObject.isComplete}\n        );\n      };\n\n      //update project\n      src_Storage.set(project.title, project);\n    };\n  },\n\n  refreshSubtasksForProject(projectTitle) {\n    if (!projectTitle) return;\n\n    const allTasks = Object.keys(localStorage)\n    .map((key)=>src_Storage.getItem(key))\n    .filter((task) => !task.isProject );\n    \n    const project = src_Storage.getItem(projectTitle);\n    project.taskContainer = [];\n    \n    for (const task of allTasks) {\n      if (task.projectTitle === projectTitle) {\n        project.taskContainer.push(\n          {name: task.title, isComplete:task.isComplete}\n        );\n      }\n    }\n\n    src_Storage.set(project.title, project);\n  },\n\n  refreshAllProjectsSubtasks() {\n    const allProjects = Object.keys(localStorage)\n    .map((key)=>src_Storage.getItem(key))\n    .filter((item)=>item.isProject)\n    .map((project) => project.title );\n\n    for (const name of allProjects) {\n      this.refreshSubtasksForProject(name);\n    };\n  },\n}\n\n/* harmony default export */ const src_SubtaskManager = (SubtaskManager);\n;// ./src/FormManager.js\n\n\n\n\n\n\n\nconst FormManager = {\n  showTaskInEditor(task) {\n    const editor = document.querySelector("#editor");\n    editor.innerHTML = getEditorAs("viewEditTask");\n\n    const form = editor.querySelector("form");\n\n    //Updating form fields based on task item properties\n    const taskTitleField = form.querySelector("#task-title");\n    taskTitleField.value = task.title;\n\n    const isComplete = form.querySelector("#task-is-complete");\n    const isNotComplete = form.querySelector("#task-is-not-complete");\n    task.isComplete\n      ? (isComplete.checked = true)\n      : (isNotComplete.checked = true);\n\n    const descriptionField = form.querySelector("#task-desc");\n    descriptionField.value = task.description;\n\n    const dueDateField = form.querySelector("#task-due-date");\n    let [month, day, year] = task.dueDate.split("-");\n    dueDateField.value = `${year}-${month}-${day}`;\n\n    const priorityField = form.querySelector(".priority-radio-buttons-wrapper");\n    const [low, medium, high, critical] =\n      priorityField.querySelectorAll("input");\n    if (task.priority === "Low") {\n      low.checked = true;\n    }\n    if (task.priority === "Medium") {\n      medium.checked = true;\n    }\n    if (task.priority === "High") {\n      high.checked = true;\n    }\n    if (task.priority === "Critical") {\n      critical.checked = true;\n    }\n\n    //Task\'s Subtasks\n    const subtasksContainer = form.querySelector(".subtasks-wrapper");\n    const subtasks = task.checkList; //array of dictionaries\n    \n    if (!subtasks.length) {\n      subtasksContainer.style.height = \'50px\'\n      subtasksContainer.innerHTML = `\n      <div class="message-wrapper">\n        <div class="message-small">No subtasks found.</div>\n      </div>\n      `;\n      const msgWrapper = subtasksContainer.querySelector(".message-wrapper");\n      msgWrapper.style.backgroundColor = "whitesmoke";\n      msgWrapper.style.margin = "0";\n    };\n\n    if (subtasks.length) {\n      let stringSet = new Set(subtasks.map(JSON.stringify));\n      let uniqueArray = Array.from(stringSet).map(JSON.parse);\n\n      for (const subtask of uniqueArray) {\n        let tempName = subtask.name\n          .replace(/[^\\w\\s]|_/g, "")\n          .replace(/\\s+/g, "-");\n\n        const card = makeCardFor("subtasksWrapper", {name: tempName,...subtask,} );\n        subtasksContainer.insertAdjacentHTML("beforeend", card);\n\n        //reselect added card\n        const addedCardCheckBox = subtasksContainer.querySelector(`#${tempName}`);\n        if (subtask.isComplete) addedCardCheckBox.checked = true;\n      };\n    };\n\n    const projectLinkField = form.querySelector("#task-link-to-project");\n    task.projectTitle\n      ? (projectLinkField.value = task.projectTitle)\n      : (projectLinkField.placeholder = "No project linked");\n  },\n\n  //This is for when user clicks any Project\n  showProjectInEditor(project) {\n    const editor = document.querySelector("#editor");\n    editor.innerHTML = getEditorAs("viewEditProject");\n\n    const form = editor.querySelector("form");\n\n    const taskTitleField = form.querySelector("#task-title");\n    taskTitleField.value = project.title;\n\n    const isComplete = form.querySelector("#task-is-complete");\n    const isNotComplete = form.querySelector("#task-is-not-complete");\n    project.isComplete\n      ? (isComplete.checked = true)\n      : (isNotComplete.checked = true);\n\n    const descriptionField = form.querySelector("#task-desc");\n    descriptionField.value = project.description;\n\n    const dueDateField = form.querySelector("#task-due-date");\n    let [month, day, year] = project.dueDate.split("-");\n    dueDateField.value = `${year}-${month}-${day}`;\n\n    const priorityField = form.querySelector(".priority-radio-buttons-wrapper");\n    const [low, medium, high, critical] =\n      priorityField.querySelectorAll("input");\n    if (project.priority === "Low") {\n      low.checked = true;\n    }\n    if (project.priority === "Medium") {\n      medium.checked = true;\n    }\n    if (project.priority === "High") {\n      high.checked = true;\n    }\n    if (project.priority === "Critical") {\n      critical.checked = true;\n    }\n\n    //Project\'s Subtasks\n    const subtasksContainer = form.querySelector(".subtasks-wrapper");\n    const subtasks = project.taskContainer; //array of dicts\n    \n    if (!subtasks.length) {\n      subtasksContainer.style.height = \'60px\'\n      subtasksContainer.innerHTML = `\n      <div class="message-wrapper">\n        <div class="message">No subtasks found.</div>\n      </div>\n      `;\n      const msgWrapper = subtasksContainer.querySelector(".message-wrapper");\n      msgWrapper.style.backgroundColor = "whitesmoke";\n      msgWrapper.style.margin = "0";\n      return;\n    };\n\n    if (subtasks.length) {\n      let stringSet = new Set(subtasks.map(JSON.stringify));\n      let uniqueArray = Array.from(stringSet).map(JSON.parse);\n  \n      for (const subTask of uniqueArray) {\n        let tempName = subTask.name\n        .replace(/[^\\w\\s]|_/g, "")\n        .replace(/\\s+/g, "-");\n  \n        const card = makeCardFor("subtasksWrapper", {name: tempName,...subTask,} );\n        subtasksContainer.insertAdjacentHTML("beforeend", card);\n  \n        //reselect added card\n        const addedCardCheckBox = subtasksContainer.querySelector(`#${tempName}`);\n        if (subTask.isComplete) addedCardCheckBox.checked = true;\n      };\n    };\n\n  },\n\n  addItemFromForm(formTitle, form) {\n    \n    if (formTitle === "Add New Task") {\n      let taskData = this.extractFormData(form);\n      taskData = this.processFormData(taskData);\n\n      const newTask = new toDoItem(\n        taskData.title,\n        taskData.description,\n        taskData.dueDate,\n        taskData.priority,\n        taskData.checkList,\n        taskData.isComplete,\n        taskData.projectTitle\n      );\n\n      if (!src_Storage.getItem(newTask.title)) {\n        src_Storage.set(newTask.title, newTask);\n      }\n\n      //Linkage\n      src_SubtaskManager.linkTaskToProject(newTask, newTask.projectTitle)\n      return;\n    };\n\n    if (formTitle === "Add New Project") {\n      let projectData = this.extractFormData(form);\n      projectData = this.processFormData(projectData);\n\n      const newProject = new Project(\n        projectData.title,\n        projectData.description,\n        projectData.dueDate,\n        projectData.priority,\n        projectData.isComplete,\n        projectData.checkList //or taskContainer\n      );\n\n      //Handle linkage of existing subtasks in comma seperated list\n      if (newProject.taskContainer.length) {\n        for (const subtask of newProject.taskContainer) {\n          if (Object.keys(localStorage).includes(subtask.name)) {\n            const existingSubtask = src_Storage.getItem(subtask.name);\n            existingSubtask.projectTitle = newProject.title;\n\n            src_Storage.set(existingSubtask.title, existingSubtask);\n          };\n        };\n      };\n      //\n\n      if (!src_Storage.getItem(newProject.title)) {\n        src_Storage.set(newProject.title, newProject);\n      }\n      return;\n    }\n  },\n\n  updateItem(currentItemTitle, newItemTitle, form) {\n    let itemData = this.extractFormData(form);//itemData is an object\n    itemData = this.processFormData(itemData);\n\n    //Get Checkboxes and Checked Status\n    let checkboxes = Array.from(\n      form.querySelectorAll(\'input[type="checkbox"]\')\n    );\n    checkboxes = checkboxes.map((eachItem) => eachItem.checked);//bool\n\n    //Get Names\n    let checklistItems = Array.from(form.querySelectorAll(".checkbox-item"));\n    checklistItems = checklistItems.map((eachItem) => eachItem.textContent);\n\n    //Handle Subtasks for Tasks/Projects\n    const subtasks = [];\n    for (let i = 0; i < checklistItems.length; i++) {\n      const pair = {};\n      const name = checklistItems[i];\n      const isComplete = checkboxes[i];\n\n      pair.name = name;\n      pair.isComplete = isComplete;\n      subtasks.push(pair);\n    };\n    //Update subtasks status in system (Only For Projects)\n    if (subtasks.length) {\n      for (const subtask of subtasks) {\n        const selectedTask = src_Storage.getItem(subtask.name);\n        \n        if (selectedTask) {//regular task containers "subtasks" aren\'t in system\n          selectedTask.isComplete = subtask.isComplete;\n          src_Storage.set(selectedTask.title, selectedTask);\n        };\n      };\n    };\n\n    if (currentItemTitle !== newItemTitle) {\n      src_Storage.remove(currentItemTitle);\n    };\n\n    const formTitle = document.querySelector(".editor-title").textContent;\n    if (formTitle.includes("Project")) {\n      const item = new Project(\n        newItemTitle,\n        itemData.description,\n        itemData.dueDate,\n        itemData.priority,\n        itemData.isComplete,\n        subtasks\n      );\n      src_Storage.set(newItemTitle, item);\n    } else {\n      const item = new toDoItem(\n        newItemTitle,\n        itemData.description,\n        itemData.dueDate,\n        itemData.priority,\n        subtasks,\n        itemData.isComplete,\n        itemData.projectTitle\n      );\n      src_Storage.set(newItemTitle, item);\n      src_SubtaskManager.refreshSubtasksForProject(item.projectTitle);\n    };\n  },\n\n  handleDelete(item) {\n    if (!item) throw new Error("Item to delete is not found!");\n    src_Storage.remove(item.title);\n    src_SubtaskManager.refreshAllProjectsSubtasks();\n  },\n\n  //helper functions for addItem and updateItem\n  extractFormData(form) {\n    const formData = new FormData(form);\n    const data = {};\n\n    for (const [key, value] of formData) {\n      data[key] = value;\n    }\n\n    return data;\n  },\n\n  processFormData(data) {\n    data.title = data.title.trim();\n\n    data.description = data.description.trim();\n\n    if (data.dueDate) {\n      let [year, month, day] = data.dueDate.split("-");\n      data.dueDate = `${month}-${day}-${year}`;\n    } else {\n      data.dueDate = undefined;\n    }\n\n    if (Object.hasOwn(data, "checkList") && data.checkList) {\n      //handle checklist\'s comma seperated values\n      data.checkList\n        ? (data.checkList = data.checkList\n            .split(",")\n            .map((subTask) => subTask.trim())\n            .filter((subTask) => subTask !== ""))\n        : [];\n\n      data.checkList = data.checkList.map((subtask) => ({\n        name: subtask,\n        isComplete: false,\n      }));\n    }\n\n    data.isComplete === "false"\n      ? (data.isComplete = false)\n      : (data.isComplete = true);\n\n    data.projectTitle ? data.projectTitle.trim() : null;\n\n    return data;\n  },\n  //\n\n  handleFormValidation(form, formType) {\n    if (!form.checkValidity()) {\n      form.reportValidity();\n      return false;\n    }\n\n    const taskErrorMsg = document.querySelector(".task-error-msg")\n      ? document.querySelector(".task-error-msg")\n      : document.querySelector(".project-error-msg");\n\n    const projectErrorMsg = document.querySelector(".project-error-msg")\n      ? document.querySelector(".project-error-msg")\n      : document.querySelector(".task-error-msg");\n\n    //checks for dupe titles.\n    function checkDupeTitle() {\n      const itemTitle = document.querySelector("#task-title").value;\n\n      let isTaskMsgActive = false;\n      if (Object.keys(localStorage).includes(itemTitle)) {\n        if (isTaskMsgActive) return;\n        isTaskMsgActive = true;\n\n        taskErrorMsg.textContent = `Task/Project "${itemTitle}" already exists!`;\n        taskErrorMsg.classList.remove("hidden");\n\n        setTimeout(() => {\n          taskErrorMsg.classList.add("hidden");\n          isTaskMsgActive = false;\n        }, 2000);\n\n        return false;\n      }\n\n      return true;\n    }\n\n    //checks for no existing project to link to.\n    function checkExistingProjectTitle() {\n      const projectLinkTitle = document.querySelector(\n        "#task-link-to-project"\n      ).value;\n\n      let isProjectMsgActive = false;\n      if (\n        projectLinkTitle &&\n        !Object.keys(localStorage).includes(projectLinkTitle)\n      ) {\n        if (isProjectMsgActive) return;\n        isProjectMsgActive = true;\n\n        projectErrorMsg.textContent = `Project "${projectLinkTitle}" does not exist!`;\n        projectErrorMsg.classList.remove("hidden");\n\n        setTimeout(() => {\n          projectErrorMsg.classList.add("hidden");\n          isProjectMsgActive = false;\n        }, 2000);\n        return false;\n      }\n\n      return true;\n    }\n\n    if (formType === "Add New Task") {\n      const isTitleValid = checkDupeTitle();\n      const isProjectTitleValid = checkExistingProjectTitle();\n\n      //if check is false, negate it to true.\n      if (!isTitleValid || !isProjectTitleValid) {\n        return false;\n      }\n    }\n\n    if (formType === "Add New Project") {\n      const isTitleValid = checkDupeTitle();\n      if (!isTitleValid) return false;\n    }\n\n    if (formType === "View/Edit Task") {\n      const isProjectTitleValid = checkExistingProjectTitle();\n      if (!isProjectTitleValid) return false;\n    }\n\n    return true;\n  },\n};\n\n/* harmony default export */ const src_FormManager = (FormManager);\n\n;// ./src/UIController.js\n\n\n\n\n\n\n\nfunction getDaysFromMilliSeconds(milliseconds) {\n  let seconds = milliseconds / 1000;\n  let days = seconds / 86400; //86400 seconds in a day\n  return days;\n}\n\nconst Controller = {\n  initialize() {\n    //for main display, project container, editor, main-title-date-wrapper\n    const editor = document.querySelector("#editor");\n    editor.innerHTML = getEditorAs("default");\n\n    this.showTodayTasks();\n    this.showAllProjects();\n\n    //event listeners\n    this.handleSearchBarInput();\n    this.handleMenuTaskButtons();\n    this.handleProjectSortByButton();\n    this.handleClickATaskorProject();\n    this.handleEditorFormButtons();\n    this.handleModalButtons();\n    this.handleImportExportModalOpenClose();\n    this.handleExportDownload();\n  },\n\n  //Handle Searches\n  handleSearchBarInput() {\n    const searchBar = document.querySelector("#search-bar");\n    searchBar.addEventListener("input", (e) => {\n      let query = e.target.value;\n      this.handleSearchquery(query);\n    });\n  },\n\n  handleSearchquery(query) {\n    if (!query) {\n      this.showTodayTasks();\n      return;\n    }\n    const mainDisplay = document.querySelector("#main-display");\n    mainDisplay.innerHTML = getMainDisplayAs("searchTasksProjects");\n\n    query = query.trim().toLowerCase();\n\n    let matchedItems = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      let object = src_Storage.getItem(src_Storage.getKey(i));\n\n      if (object.title.trim().toLowerCase().includes(query)) {\n        matchedItems.push(object);\n      }\n    }\n\n    if (!matchedItems.length) {\n      const mainDisplay = document.querySelector("#main-display");\n      mainDisplay.innerHTML = getMainDisplayAs("noSearchResults");\n      return;\n    }\n\n    const cardContainer = document.querySelector(".card-container");\n    cardContainer.innerHTML = "";\n\n    for (const match of matchedItems) {\n      const card = makeCardFor("cardContainer", match);\n      cardContainer.insertAdjacentHTML("beforeend", card);\n    }\n  },\n\n  handleMenuTaskButtons() {\n    const taskButtons = document.querySelector(".task-btn-container");\n\n    taskButtons.addEventListener("click", (e) => {\n      const targetClassList = e.target.classList.value;\n\n      //handle add new task/project button\n      if (targetClassList === "tasks-add-new") {\n        const createOptions = document.querySelector(\n          ".task-create-new-options"\n        );\n        createOptions.classList.toggle("hidden");\n\n        //handle differentiate task or project\n        //this callback fn is called inside handleTaskProjectDropdown\n        this.handleTaskProjectDropdown((textValue) => {\n          const editor = document.querySelector("#editor");\n          if (textValue === "Add New Task") {\n            createOptions.classList.add("hidden");\n            editor.innerHTML = getEditorAs("addNewTask");\n            return;\n          }\n          if (textValue === "Add New Project") {\n            createOptions.classList.add("hidden");\n            editor.innerHTML = getEditorAs("addNewProject");\n            return;\n          }\n        });\n        return;\n      }\n\n      //handle upcoming tasks button\n      if (targetClassList === "tasks-upcoming") {\n        this.showUpcomingTasks();\n        return;\n      }\n\n      //handle today\'s tasks button\n      if (targetClassList === "tasks-today") {\n        this.showTodayTasks();\n        return;\n      }\n\n      //handle past projects/tasks button\n      if (targetClassList === "tasks-past") {\n        this.showPastTasksorProjects();\n        return;\n      }\n    });\n  },\n\n  handleTaskProjectDropdown(callbackFn) {\n    const taskOrProjectOption = document.querySelector(\n      ".task-create-new-options"\n    );\n    taskOrProjectOption.addEventListener("click", (e) => {\n      const textValue = e.target.textContent;\n      callbackFn(textValue);\n    });\n  },\n\n  handleClickATaskorProject() {\n    const projectContainer = document.querySelector(".project-container");\n    const cardContainer = document.querySelector(".card-container");\n\n    if (!projectContainer.hasEventListener) {\n      projectContainer.hasEventListener = true; //custom property\n\n      projectContainer.addEventListener("click", (e) => {\n        if (!e.target.closest(".card") && !e.target.closest(".project-item")) {\n          return;\n        }\n\n        //Get element, see if it\'s a card item or project item\n        const ele = e.target.closest(".card")\n          ? e.target.closest(".card")\n          : e.target.closest(".project-item");\n\n        //Getting card title or project title\n        let title;\n        ele.classList.value === "card"\n          ? (title = ele.querySelector(".card-title").textContent)\n          : (title = ele.querySelector(".project-title").textContent);\n\n        //this is for form validation\n        const oldItemTitles = document.querySelectorAll(".clickedItemTitle");\n        for (const node of oldItemTitles) {\n          node.remove();\n        }\n        const clickedItemTitle = document.createElement("p");\n        clickedItemTitle.classList.add("hidden", "clickedItemTitle");\n        clickedItemTitle.textContent = title;\n\n        const body = document.querySelector("body");\n        body.appendChild(clickedItemTitle);\n\n        const object = src_Storage.getItem(title);\n        src_FormManager.showProjectInEditor(object);\n      });\n    }\n\n    if (!cardContainer.hasEventListener) {\n      cardContainer.hasEventListener = true;\n\n      cardContainer.addEventListener("click", (e) => {\n        if (!e.target.closest(".card") && !e.target.closest(".project-item")) {\n          return;\n        }\n\n        //Get element, see if it\'s a card item or project item\n        const ele = e.target.closest(".card")\n          ? e.target.closest(".card")\n          : e.target.closest(".project-item");\n\n        //Getting card title or project title\n        let title;\n        ele.classList.value === "card"\n          ? (title = ele.querySelector(".card-title").textContent)\n          : (title = ele.querySelector(".project-title").textContent);\n\n        //this is for form validation\n        const oldItemTitles = document.querySelectorAll(".clickedItemTitle");\n        for (const node of oldItemTitles) {\n          node.remove();\n        }\n        const clickedItemTitle = document.createElement("p");\n        clickedItemTitle.classList.add("hidden", "clickedItemTitle");\n        clickedItemTitle.textContent = title;\n\n        const body = document.querySelector("body");\n        body.appendChild(clickedItemTitle);\n\n        //Check if task or project in Storage, then give it to Form Manager\n        const object = src_Storage.getItem(title);\n        if (object.isProject) {\n          src_FormManager.showProjectInEditor(object);\n        } else {\n          src_FormManager.showTaskInEditor(object);\n        };\n      });\n    }\n  },\n\n  showTodayTasks() {\n    let today = format(new Date(), "MM-dd-yyyy");\n\n    //prepare screens\n    const mainDisplay = document.querySelector("#main-display");\n    mainDisplay.innerHTML = getMainDisplayAs("todaysTasks");\n    const cardContainer = document.querySelector(".card-container");\n    cardContainer.innerHTML = "";\n    const editor = document.querySelector("#editor");\n    editor.innerHTML = getEditorAs("default");\n\n    //Get by earliest date\n    let allObjects = Object.keys(localStorage)\n      .map((key) => src_Storage.getItem(key))\n      .sort(\n        (objectA, objectB) =>\n          new Date(objectA.dueDate) - new Date(objectB.dueDate)\n      );\n    allObjects\n      .filter(\n        (object) =>\n          !object.isComplete &&\n          !object.isProject &&\n          getDaysFromMilliSeconds(new Date(object.dueDate) - new Date(today)) <=\n            6\n      )\n      .forEach((object) => {\n        const taskCard = makeCardFor("cardContainer", object);\n        cardContainer.insertAdjacentHTML("beforeend", taskCard);\n      });\n    //\n\n    //since this method creates a new instance of the displays\n    //we need to re initialize the event listeners\n    this.handleClickATaskorProject();\n\n    if (!cardContainer.innerHTML) {\n      mainDisplay.innerHTML = getMainDisplayAs("noTodays");\n    }\n  },\n\n  showUpcomingTasks() {\n    let today = format(new Date(), "MM-dd-yyyy");\n\n    const mainDisplay = document.querySelector("#main-display");\n    mainDisplay.innerHTML = getMainDisplayAs("upcomingTasks");\n    const cardContainer = document.querySelector(".card-container");\n    cardContainer.innerHTML = "";\n    const editor = document.querySelector("#editor");\n    editor.innerHTML = getEditorAs("default");\n\n    //chain array method sorting\n    let allObjects = Object.keys(localStorage)\n      .map((key) => src_Storage.getItem(key))\n      .sort(\n        (objectA, objectB) =>\n          new Date(objectA.dueDate) - new Date(objectB.dueDate)\n      );\n\n    allObjects\n      .filter(\n        (object) =>\n          object.dueDate > today &&\n          !object.isComplete &&\n          !object.isProject &&\n          getDaysFromMilliSeconds(new Date(object.dueDate) - new Date(today)) >\n            6\n      )\n      .forEach((object) => {\n        const taskCard = makeCardFor("cardContainer", object);\n        cardContainer.insertAdjacentHTML("beforeend", taskCard);\n      });\n    //\n\n    //since this method creates a new instance of the Displays\n    //we need to re initialize the event listeners\n    this.handleClickATaskorProject();\n\n    if (!cardContainer.innerHTML) {\n      mainDisplay.innerHTML = getMainDisplayAs("noUpcoming");\n    }\n  },\n\n  showPastTasksorProjects() {\n    const mainDisplay = document.querySelector("#main-display");\n    mainDisplay.innerHTML = getMainDisplayAs("pastTasksProjects");\n    const cardContainer = document.querySelector(".card-container");\n\n    //chain array method sorting\n    let allObjects = Object.keys(localStorage)\n      .map((key) => src_Storage.getItem(key))\n      .sort(\n        (objectA, objectB) =>\n          new Date(objectA.dueDate) - new Date(objectB.dueDate)\n      );\n\n    allObjects\n      .filter((object) => object.isComplete)\n      .forEach((object) => {\n        const projectCard = makeCardFor("cardContainer", object);\n        cardContainer.insertAdjacentHTML("beforeend", projectCard);\n      });\n    //\n\n    //since this method creates a new instance of the Displays\n    //we need to re initialize the event listener\n    //to correctly capture the new instance of the Displays\n    this.handleClickATaskorProject();\n\n    if (!cardContainer.innerHTML) {\n      mainDisplay.innerHTML = getMainDisplayAs("noPastTasksProjects");\n    }\n  },\n\n  showAllProjects() {\n    const noProjectsFound = `\n    <div class="message-wrapper">\n      <div class="message">No Projects Found.</div>\n    </div>\n    `;\n\n    if (!localStorage.length) {\n      const projectContainer = document.querySelector(".project-container");\n      projectContainer.innerHTML = noProjectsFound;\n      return;\n    }\n\n    const projectContainer = document.querySelector(".project-container");\n    projectContainer.innerHTML = "";\n\n    //Default Ascending Sort\n    const allObjects = Object.keys(localStorage)\n      .map((item) => src_Storage.getItem(item))\n      .filter((item) => item && item.isProject)\n      .sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate))\n      .forEach((project) => {\n        const projectCard = makeCardFor("projectContainer", project);\n        projectContainer.insertAdjacentHTML("beforeend", projectCard);\n      });\n\n    //since this method creates a new instance of the Displays\n    //we need to re initialize the event listener\n    this.handleClickATaskorProject();\n\n    if (!projectContainer.innerHTML) {\n      projectContainer.innerHTML = noProjectsFound;\n      return;\n    }\n  },\n\n  //Work on this\n  handleProjectSortByButton() {\n    const sortByButton = document.querySelector(".sort-by-button");\n    const sortOptions = document.querySelector(".sort-options");\n\n    sortByButton.addEventListener("click", () => {\n      sortOptions.classList.toggle("hidden");\n    });\n\n    sortOptions.addEventListener("click", (e) => {\n      let targetText = e.target.textContent;\n\n      if (targetText === "Low Priority - High Priority") {\n        this.sortAllProjects("lth");\n        sortOptions.classList.toggle("hidden");\n      } else if (targetText === "High Priority - Low Priority") {\n        this.sortAllProjects("htl");\n        sortOptions.classList.toggle("hidden");\n      } else if (targetText === "Date Created - Earliest") {\n        this.sortAllProjects("dce");\n        sortOptions.classList.toggle("hidden");\n      } else if (targetText === "Date Created - Latest") {\n        this.sortAllProjects("dcl");\n        sortOptions.classList.toggle("hidden");\n      } else if (targetText === "Date Due - Ascending") {\n        this.sortAllProjects("dda");\n        sortOptions.classList.toggle("hidden");\n      } else if (targetText === "Date Due - Descending") {\n        this.sortAllProjects("ddd");\n        sortOptions.classList.toggle("hidden");\n      }\n    });\n  },\n\n  //Work on this\n  sortAllProjects(sortOption) {\n    const projectContainer = document.querySelector(".project-container");\n    projectContainer.innerHTML = "";\n\n    //helpers\n    function showProject(project) {\n      const projectCard = makeCardFor("projectContainer", project);\n      projectContainer.insertAdjacentHTML("beforeend", projectCard);\n    }\n\n    const priorityMap = {\n      Low: 1,\n      Medium: 2,\n      High: 3,\n      Critical: 4,\n    };\n\n    const reverseMap = {\n      1: "Low",\n      2: "Medium",\n      3: "High",\n      4: "Critical",\n    };\n    //\n\n    let allProjects = Object.keys(localStorage)\n      .map((key) => src_Storage.getItem(key))\n      .filter((item) => item && item.isProject)\n      .map((project) => {\n        project.priority = priorityMap[project.priority];\n        return project;\n      }); //need explicit return to map the priorities\n\n    if (sortOption === "lth") {\n      allProjects\n        .sort((a, b) => a.priority - b.priority)\n        .forEach((project) => {\n          project.priority = reverseMap[project.priority];\n          showProject(project);\n        });\n\n      return;\n    }\n    if (sortOption === "htl") {\n      allProjects\n        .sort((a, b) => b.priority - a.priority)\n        .forEach((project) => {\n          project.priority = reverseMap[project.priority];\n          showProject(project);\n        });\n\n      return;\n    }\n    if (sortOption === "dce") {\n      allProjects\n        .sort((a, b) => new Date(a.createDate) - new Date(b.createDate))\n        .forEach((project) => {\n          project.priority = reverseMap[project.priority];\n          showProject(project);\n        });\n      return;\n    }\n    if (sortOption === "dcl") {\n      allProjects\n        .sort((a, b) => new Date(b.createDate) - new Date(a.createDate))\n        .forEach((project) => {\n          project.priority = reverseMap[project.priority];\n          showProject(project);\n        });\n      return;\n    }\n    if (sortOption === "dda") {\n      allProjects\n        .sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate))\n        .forEach((project) => {\n          project.priority = reverseMap[project.priority];\n          showProject(project);\n        });\n      return;\n    }\n    if (sortOption === "ddd") {\n      allProjects\n        .sort((a, b) => new Date(b.dueDate) - new Date(a.dueDate))\n        .forEach((project) => {\n          project.priority = reverseMap[project.priority];\n          showProject(project);\n        });\n      return;\n    }\n  },\n\n  handleEditorFormButtons() {\n    const editor = document.querySelector("#editor");\n\n    if (!editor.hasEventListener) {\n      editor.hasEventListener = true; //custom property\n\n      editor.addEventListener("click", (e) => {\n        const clickedButton = e.target.classList;\n        const mainDisplayTitle = document.querySelector(".main-title").textContent;\n\n        if (!clickedButton.contains("form-button")) return;\n\n        const editorTitle = document.querySelector(".editor-title").textContent;\n\n        if (clickedButton.contains("cancel-button")) {\n          editor.innerHTML = getEditorAs("default");\n          return;\n        }\n\n        if (clickedButton.contains("delete-button")) {\n          const currentItemTitle = document.querySelector("#task-title").value;\n          const modalMessage = document.querySelector(".modal-message");\n          modalMessage.textContent = `Are you sure you want to delete "${currentItemTitle}"?`;\n          this.toggleModalandOverlay();\n          return;\n        }\n\n        if (\n          clickedButton.contains("submit-button") &&\n          (editorTitle === "Add New Task" || editorTitle === "Add New Project")\n        ) {\n          const form = editor.querySelector("form");\n          if (!src_FormManager.handleFormValidation(form, editorTitle)) return;\n\n          src_FormManager.addItemFromForm(editorTitle, form);\n          showSuccessMsg("add", mainDisplayTitle);\n          return;\n        }\n\n        if (\n          clickedButton.contains("submit-button") &&\n          (editorTitle === "View/Edit Task" || editorTitle === "View/Edit Project")\n        ) {\n          const form = editor.querySelector("form");\n\n          if (!src_FormManager.handleFormValidation(form, editorTitle)) return;\n\n          //get current title\n          const currentItemTitle = document.querySelector(".clickedItemTitle").textContent;\n          const newItemTitle = document.querySelector("#task-title").value;\n          src_FormManager.updateItem(currentItemTitle, newItemTitle, form);\n          showSuccessMsg("update", mainDisplayTitle);\n          return;\n        }\n      });\n    }\n\n    function updateMainDisplay(currentMainDisplay) {\n      if (currentMainDisplay === "Today\'s Tasks") {\n        Controller.showTodayTasks();\n        Controller.showAllProjects();\n        return;\n      }\n      if (currentMainDisplay === "Upcoming Tasks") {\n        Controller.showUpcomingTasks();\n        Controller.showAllProjects();\n        return;\n      }\n      if (currentMainDisplay === "Past Tasks/Projects") {\n        Controller.showPastTasksorProjects();\n        Controller.showAllProjects();\n        return;\n      }\n    }\n\n    function showSuccessMsg(msgType, mainDisplayTitle) {\n      //Show successful msg and then update main display based on display\'s title\n      if (msgType==="add") {\n        editor.innerHTML = getEditorAs(\'successfulAdd\');\n        const msg = document.querySelector(\'.successful-add\');\n        msg.style.backgroundColor = "whitesmoke";\n        msg.style.color = "black";\n        msg.style.padding = "10px 8px 10px 8px";\n        msg.style.borderRadius = "5px";\n\n        setTimeout(() => {\n          updateMainDisplay(mainDisplayTitle);\n          editor.innerHTML = getEditorAs("default");\n        }, 800);\n\n        return;  \n      };\n\n      if (msgType==="update") {\n        editor.innerHTML = getEditorAs(\'successfulUpdate\');\n        const msg = document.querySelector(\'.successful-update\');\n        msg.style.backgroundColor = "whitesmoke";\n        msg.style.color = "black";\n        msg.style.padding = "10px 8px 10px 8px";\n        msg.style.borderRadius = "5px";\n\n        setTimeout(() => {\n          updateMainDisplay(mainDisplayTitle);\n          editor.innerHTML = getEditorAs("default");\n        }, 800);\n\n        return;\n      };\n    };\n\n  },\n\n  toggleModalandOverlay() {\n    const modal = document.querySelector(".modal");\n    const overlay = document.querySelector(".overlay");\n    modal.classList.toggle("hidden");\n    overlay.classList.toggle("hidden");\n  },\n\n  handleModalButtons() {\n    const yesModalBtn = document.querySelector(".modal-yes-button");\n    const noModalBtn = document.querySelector(".modal-no-button");\n    const overlay = document.querySelector(".overlay");\n\n    noModalBtn.addEventListener("click", () => {\n      this.toggleModalandOverlay();\n    });\n    overlay.addEventListener("click", () => {\n      this.toggleModalandOverlay();\n    });\n    yesModalBtn.addEventListener("click", () => {\n      const currentItemTitle = document.querySelector("#task-title").value;\n      const currentMainDisplayTitle =\n        document.querySelector(".main-title").textContent;\n\n      const item = src_Storage.getItem(currentItemTitle);\n      src_FormManager.handleDelete(item);\n\n      this.toggleModalandOverlay();\n\n      //refresh\n      if (currentMainDisplayTitle === "Today\'s Tasks") {\n        const editor = document.querySelector(\'#editor\');\n        editor.innerHTML = getEditorAs("default");\n        this.showTodayTasks();\n        this.showAllProjects();\n        return;\n      }\n      if (currentMainDisplayTitle === "Upcoming Tasks") {\n        const editor = document.querySelector(\'#editor\');\n        editor.innerHTML = getEditorAs("default");\n        this.showUpcomingTasks();\n        this.showAllProjects();\n        return;\n      }\n      if (currentMainDisplayTitle === "Past Tasks/Projects") {\n        const editor = document.querySelector(\'#editor\');\n        editor.innerHTML = getEditorAs("default");\n        this.showPastTasksorProjects();\n        this.showAllProjects();\n        return;\n      }\n    });\n  },\n\n  handleImportExportModalOpenClose() {\n    const iEToggleButton = document.querySelector(".import-export-button");\n    const iEModal = document.querySelector("#import-export-modal");\n    iEToggleButton.addEventListener("click", () => {\n      iEModal.showModal();\n    });\n\n    const ieCloseButton = document.querySelector(".ie-close-btn");\n    ieCloseButton.addEventListener("click", () => {\n      //Dict of File objs\n      const inputtedFiles = document.querySelector("#import-data").files;\n      if (inputtedFiles.length) {\n        for (const file of inputtedFiles) {\n          if (file.type !== "application/json") {\n            continue;\n          }\n          //refer to API video\n          const fileReader = new FileReader();\n          fileReader.readAsText(file);\n          fileReader.addEventListener("load", () => {\n            const object = JSON.parse(fileReader.result);\n\n            //Parse each value (since they have backslashes)\n            const items = Object.keys(object).map((title) => {\n              let value = object[title];\n              return (value = JSON.parse(value));\n            });\n\n            if (items.length) {\n              src_Storage.clearAll();\n            };\n\n            for (const item of items) {\n              src_Storage.set(item.title, item);\n            };\n\n            this.showTodayTasks();\n            this.showAllProjects();\n          });\n        }\n      }\n\n      iEModal.close();\n    });\n  },\n\n  handleExportDownload() {\n    const downloadBtn = document.querySelector(".ie-download-btn");\n    downloadBtn.addEventListener("click", () => {\n      let userData = {};\n      \n      if (!localStorage.length) {\n        const iEModal = document.querySelector("#import-export-modal");\n        const errorMsg = iEModal.querySelector(".error-msg");\n\n        errorMsg.classList.toggle("hidden");\n        setTimeout(() => {\n          errorMsg.classList.toggle("hidden");\n        }, 1500);\n        return;\n      };\n      \n      for (let i = 0; i < localStorage.length; i++) {\n        let key = localStorage.key(i);\n        userData[key] = localStorage.getItem(key);\n      };\n\n      userData = JSON.stringify(userData, null, 2);\n\n      let blob = new Blob([userData], { type: "application/json" });\n      let url = URL.createObjectURL(blob);\n      downloadBtn.href = url;\n      downloadBtn.download = "userData.json";//user download\n    });\n  },\n};\n\n/* harmony default export */ const UIController = (Controller);\n\n;// ./src/index.js\n\n\n\n\n\nUIController.initialize();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///86\n')},369:(I,g,n)=>{I.exports=n.p+"d92647541fd5192917e0.ttf"}},__webpack_module_cache__={};function __webpack_require__(I){var g=__webpack_module_cache__[I];if(void 0!==g)return g.exports;var n=__webpack_module_cache__[I]={id:I,exports:{}};return __webpack_modules__[I](n,n.exports,__webpack_require__),n.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.n=I=>{var g=I&&I.__esModule?()=>I.default:()=>I;return __webpack_require__.d(g,{a:g}),g},__webpack_require__.d=(I,g)=>{for(var n in g)__webpack_require__.o(g,n)&&!__webpack_require__.o(I,n)&&Object.defineProperty(I,n,{enumerable:!0,get:g[n]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(I){if("object"==typeof window)return window}}(),__webpack_require__.o=(I,g)=>Object.prototype.hasOwnProperty.call(I,g),(()=>{var I;__webpack_require__.g.importScripts&&(I=__webpack_require__.g.location+"");var g=__webpack_require__.g.document;if(!I&&g&&(g.currentScript&&"SCRIPT"===g.currentScript.tagName.toUpperCase()&&(I=g.currentScript.src),!I)){var n=g.getElementsByTagName("script");if(n.length)for(var t=n.length-1;t>-1&&(!I||!/^http(s?):/.test(I));)I=n[t--].src}if(!I)throw new Error("Automatic publicPath is not supported in this browser");I=I.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=I})(),__webpack_require__.b=document.baseURI||self.location.href,__webpack_require__.nc=void 0;var __webpack_exports__=__webpack_require__(86)})();